
music.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a9c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ec  08002c2c  08002c2c  00012c2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e18  08002e18  0003171c  2**0
                  CONTENTS
  4 .ARM          00000000  08002e18  08002e18  0003171c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e18  08002e18  0003171c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e18  08002e18  00012e18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e1c  08002e1c  00012e1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0001171c  20000000  08002e20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006170  2001171c  0801453c  0003171c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001788c  0801453c  0003788c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003171c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000625e  00000000  00000000  0003174c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a6e  00000000  00000000  000379aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005d0  00000000  00000000  00039418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000488  00000000  00000000  000399e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000282cf  00000000  00000000  00039e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008c6f  00000000  00000000  0006213f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f7962  00000000  00000000  0006adae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00162710  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000166c  00000000  00000000  00162760  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2001171c 	.word	0x2001171c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002c14 	.word	0x08002c14

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20011720 	.word	0x20011720
 80001cc:	08002c14 	.word	0x08002c14

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
 8000296:	4603      	mov	r3, r0
 8000298:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800029a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800029e:	2b00      	cmp	r3, #0
 80002a0:	db0b      	blt.n	80002ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002a2:	79fb      	ldrb	r3, [r7, #7]
 80002a4:	f003 021f 	and.w	r2, r3, #31
 80002a8:	4907      	ldr	r1, [pc, #28]	; (80002c8 <__NVIC_EnableIRQ+0x38>)
 80002aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ae:	095b      	lsrs	r3, r3, #5
 80002b0:	2001      	movs	r0, #1
 80002b2:	fa00 f202 	lsl.w	r2, r0, r2
 80002b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80002ba:	bf00      	nop
 80002bc:	370c      	adds	r7, #12
 80002be:	46bd      	mov	sp, r7
 80002c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c4:	4770      	bx	lr
 80002c6:	bf00      	nop
 80002c8:	e000e100 	.word	0xe000e100

080002cc <GPIO_Init>:

/*----------------------------------------------------------------------------*/
/* Configure GPIO                                                             */
/*----------------------------------------------------------------------------*/
void GPIO_Init(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b08a      	sub	sp, #40	; 0x28
 80002d0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002d2:	f107 0314 	add.w	r3, r7, #20
 80002d6:	2200      	movs	r2, #0
 80002d8:	601a      	str	r2, [r3, #0]
 80002da:	605a      	str	r2, [r3, #4]
 80002dc:	609a      	str	r2, [r3, #8]
 80002de:	60da      	str	r2, [r3, #12]
 80002e0:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80002e2:	4b2b      	ldr	r3, [pc, #172]	; (8000390 <GPIO_Init+0xc4>)
 80002e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002e6:	4a2a      	ldr	r2, [pc, #168]	; (8000390 <GPIO_Init+0xc4>)
 80002e8:	f043 0304 	orr.w	r3, r3, #4
 80002ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002ee:	4b28      	ldr	r3, [pc, #160]	; (8000390 <GPIO_Init+0xc4>)
 80002f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002f2:	f003 0304 	and.w	r3, r3, #4
 80002f6:	613b      	str	r3, [r7, #16]
 80002f8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80002fa:	4b25      	ldr	r3, [pc, #148]	; (8000390 <GPIO_Init+0xc4>)
 80002fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002fe:	4a24      	ldr	r2, [pc, #144]	; (8000390 <GPIO_Init+0xc4>)
 8000300:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000304:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000306:	4b22      	ldr	r3, [pc, #136]	; (8000390 <GPIO_Init+0xc4>)
 8000308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800030a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800030e:	60fb      	str	r3, [r7, #12]
 8000310:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000312:	4b1f      	ldr	r3, [pc, #124]	; (8000390 <GPIO_Init+0xc4>)
 8000314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000316:	4a1e      	ldr	r2, [pc, #120]	; (8000390 <GPIO_Init+0xc4>)
 8000318:	f043 0301 	orr.w	r3, r3, #1
 800031c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800031e:	4b1c      	ldr	r3, [pc, #112]	; (8000390 <GPIO_Init+0xc4>)
 8000320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000322:	f003 0301 	and.w	r3, r3, #1
 8000326:	60bb      	str	r3, [r7, #8]
 8000328:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800032a:	4b19      	ldr	r3, [pc, #100]	; (8000390 <GPIO_Init+0xc4>)
 800032c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800032e:	4a18      	ldr	r2, [pc, #96]	; (8000390 <GPIO_Init+0xc4>)
 8000330:	f043 0302 	orr.w	r3, r3, #2
 8000334:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000336:	4b16      	ldr	r3, [pc, #88]	; (8000390 <GPIO_Init+0xc4>)
 8000338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800033a:	f003 0302 	and.w	r3, r3, #2
 800033e:	607b      	str	r3, [r7, #4]
 8000340:	687b      	ldr	r3, [r7, #4]
	//this is the blue button
	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000342:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000346:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000348:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800034c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800034e:	2300      	movs	r3, #0
 8000350:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000352:	f107 0314 	add.w	r3, r7, #20
 8000356:	4619      	mov	r1, r3
 8000358:	480e      	ldr	r0, [pc, #56]	; (8000394 <GPIO_Init+0xc8>)
 800035a:	f001 fdbb 	bl	8001ed4 <HAL_GPIO_Init>
	//this is the external button
	GPIO_InitStruct.Pin = S1_Pin;
 800035e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000362:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000364:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000368:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800036a:	2302      	movs	r3, #2
 800036c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(S1_GPIO_Port, &GPIO_InitStruct);
 800036e:	f107 0314 	add.w	r3, r7, #20
 8000372:	4619      	mov	r1, r3
 8000374:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000378:	f001 fdac 	bl	8001ed4 <HAL_GPIO_Init>

	/* EXTI15_10_IRQn interrupt init*/
	// Note you will have to add EXTI15_10_IRQn Interrupt handler function as well
	// This is the interrupt handler for the blue button
	NVIC_EnableIRQ(EXTI15_10_IRQn);
 800037c:	2028      	movs	r0, #40	; 0x28
 800037e:	f7ff ff87 	bl	8000290 <__NVIC_EnableIRQ>

	/* EXTI9_5_IRQn interrupt init*/
	// Note you will have to add EXTI9_15_IRQn Interrupt handler function as well
	// This is the interrupt handler for the external buttons (S1)
	NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000382:	2017      	movs	r0, #23
 8000384:	f7ff ff84 	bl	8000290 <__NVIC_EnableIRQ>

	// try this HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
	// pin pc 13 is the blue button
}
 8000388:	bf00      	nop
 800038a:	3728      	adds	r7, #40	; 0x28
 800038c:	46bd      	mov	sp, r7
 800038e:	bd80      	pop	{r7, pc}
 8000390:	40021000 	.word	0x40021000
 8000394:	48000800 	.word	0x48000800

08000398 <GPIO_Output_Init>:
// GPIO Output initialization for GPIO banks A, B, C, and D only
// Expects GPIO to be GPIOA, GPIOB, GPIOC, or GPIOD.
// pin is expected to be 0 through 15
// Note -- if the clock is not enabled the 16 GPIO pins are non-functional!
void GPIO_Output_Init( GPIO_TypeDef *GPIO, uint32_t pin )
{
 8000398:	b480      	push	{r7}
 800039a:	b083      	sub	sp, #12
 800039c:	af00      	add	r7, sp, #0
 800039e:	6078      	str	r0, [r7, #4]
 80003a0:	6039      	str	r1, [r7, #0]
	// Enable the peripheral clocks of for GPIO
	if ( GPIO == GPIOA )
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80003a8:	d106      	bne.n	80003b8 <GPIO_Output_Init+0x20>
		RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN ;
 80003aa:	4b36      	ldr	r3, [pc, #216]	; (8000484 <GPIO_Output_Init+0xec>)
 80003ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003ae:	4a35      	ldr	r2, [pc, #212]	; (8000484 <GPIO_Output_Init+0xec>)
 80003b0:	f043 0301 	orr.w	r3, r3, #1
 80003b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003b6:	e01f      	b.n	80003f8 <GPIO_Output_Init+0x60>
	else if ( GPIO == GPIOB )
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	4a33      	ldr	r2, [pc, #204]	; (8000488 <GPIO_Output_Init+0xf0>)
 80003bc:	4293      	cmp	r3, r2
 80003be:	d106      	bne.n	80003ce <GPIO_Output_Init+0x36>
		RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN ;
 80003c0:	4b30      	ldr	r3, [pc, #192]	; (8000484 <GPIO_Output_Init+0xec>)
 80003c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003c4:	4a2f      	ldr	r2, [pc, #188]	; (8000484 <GPIO_Output_Init+0xec>)
 80003c6:	f043 0302 	orr.w	r3, r3, #2
 80003ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003cc:	e014      	b.n	80003f8 <GPIO_Output_Init+0x60>
	else if ( GPIO == GPIOC )
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	4a2e      	ldr	r2, [pc, #184]	; (800048c <GPIO_Output_Init+0xf4>)
 80003d2:	4293      	cmp	r3, r2
 80003d4:	d106      	bne.n	80003e4 <GPIO_Output_Init+0x4c>
		RCC->AHB2ENR |= RCC_AHB2ENR_GPIOCEN ;
 80003d6:	4b2b      	ldr	r3, [pc, #172]	; (8000484 <GPIO_Output_Init+0xec>)
 80003d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003da:	4a2a      	ldr	r2, [pc, #168]	; (8000484 <GPIO_Output_Init+0xec>)
 80003dc:	f043 0304 	orr.w	r3, r3, #4
 80003e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003e2:	e009      	b.n	80003f8 <GPIO_Output_Init+0x60>
	else if ( GPIO == GPIOD )
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	4a2a      	ldr	r2, [pc, #168]	; (8000490 <GPIO_Output_Init+0xf8>)
 80003e8:	4293      	cmp	r3, r2
 80003ea:	d145      	bne.n	8000478 <GPIO_Output_Init+0xe0>
		RCC->AHB2ENR |= RCC_AHB2ENR_GPIODEN ;
 80003ec:	4b25      	ldr	r3, [pc, #148]	; (8000484 <GPIO_Output_Init+0xec>)
 80003ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003f0:	4a24      	ldr	r2, [pc, #144]	; (8000484 <GPIO_Output_Init+0xec>)
 80003f2:	f043 0308 	orr.w	r3, r3, #8
 80003f6:	64d3      	str	r3, [r2, #76]	; 0x4c
	else
		return ;

	// GPIO Mode: Input(00), Output(01), AlterFunc(10), Analog(11, reset)
	GPIO->MODER &= ~( (uint32_t)3 << ( 2 * pin ) ) ;  // clear to input mode (00)
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	681a      	ldr	r2, [r3, #0]
 80003fc:	683b      	ldr	r3, [r7, #0]
 80003fe:	005b      	lsls	r3, r3, #1
 8000400:	2103      	movs	r1, #3
 8000402:	fa01 f303 	lsl.w	r3, r1, r3
 8000406:	43db      	mvns	r3, r3
 8000408:	401a      	ands	r2, r3
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	601a      	str	r2, [r3, #0]
	GPIO->MODER |= (uint32_t)1 << ( 2 * pin ) ;      //  Output(01)
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	681a      	ldr	r2, [r3, #0]
 8000412:	683b      	ldr	r3, [r7, #0]
 8000414:	005b      	lsls	r3, r3, #1
 8000416:	2101      	movs	r1, #1
 8000418:	fa01 f303 	lsl.w	r3, r1, r3
 800041c:	431a      	orrs	r2, r3
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	601a      	str	r2, [r3, #0]
	
	// GPIO Speed: Low speed (00), Medium speed (01), Fast speed (10), High speed (11)
	GPIO->OSPEEDR &= ~( (uint32_t)3 << ( 2 * pin ) ) ;	// set to cleared which is low speed
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	689a      	ldr	r2, [r3, #8]
 8000426:	683b      	ldr	r3, [r7, #0]
 8000428:	005b      	lsls	r3, r3, #1
 800042a:	2103      	movs	r1, #3
 800042c:	fa01 f303 	lsl.w	r3, r1, r3
 8000430:	43db      	mvns	r3, r3
 8000432:	401a      	ands	r2, r3
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	609a      	str	r2, [r3, #8]
	GPIO->OSPEEDR |=   (uint32_t)3 << ( 2 * pin ) ;  // High speed
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	689a      	ldr	r2, [r3, #8]
 800043c:	683b      	ldr	r3, [r7, #0]
 800043e:	005b      	lsls	r3, r3, #1
 8000440:	2103      	movs	r1, #3
 8000442:	fa01 f303 	lsl.w	r3, r1, r3
 8000446:	431a      	orrs	r2, r3
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	609a      	str	r2, [r3, #8]
	
	// GPIO Output Type: Output push-pull (0, reset), Output open drain (1) 
	GPIO->OTYPER &= ~( (uint32_t)1 << pin ) ;       // Push-pull
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	685a      	ldr	r2, [r3, #4]
 8000450:	2101      	movs	r1, #1
 8000452:	683b      	ldr	r3, [r7, #0]
 8000454:	fa01 f303 	lsl.w	r3, r1, r3
 8000458:	43db      	mvns	r3, r3
 800045a:	401a      	ands	r2, r3
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	605a      	str	r2, [r3, #4]
	
	// GPIO Push-Pull: No pull-up, pull-down (00), Pull-up (01), Pull-down (10), Reserved (11)
	GPIO->PUPDR   &= ~( (uint32_t)3 << ( 2 * pin ) ) ;  // No pull-up, no pull-down
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	68da      	ldr	r2, [r3, #12]
 8000464:	683b      	ldr	r3, [r7, #0]
 8000466:	005b      	lsls	r3, r3, #1
 8000468:	2103      	movs	r1, #3
 800046a:	fa01 f303 	lsl.w	r3, r1, r3
 800046e:	43db      	mvns	r3, r3
 8000470:	401a      	ands	r2, r3
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	60da      	str	r2, [r3, #12]
 8000476:	e000      	b.n	800047a <GPIO_Output_Init+0xe2>
		return ;
 8000478:	bf00      	nop
}
 800047a:	370c      	adds	r7, #12
 800047c:	46bd      	mov	sp, r7
 800047e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000482:	4770      	bx	lr
 8000484:	40021000 	.word	0x40021000
 8000488:	48000400 	.word	0x48000400
 800048c:	48000800 	.word	0x48000800
 8000490:	48000c00 	.word	0x48000c00

08000494 <LED_Init>:

// set up PA5, PA6, and PA7 to drive LEDs
void LED_Init(void){
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0
	GPIO_Output_Init( GPIOA, NUCLEO_GREEN_LED_PIN ) ;	// hard wired PA5 to on-board LD2 LED
 8000498:	2105      	movs	r1, #5
 800049a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800049e:	f7ff ff7b 	bl	8000398 <GPIO_Output_Init>
	GPIO_Output_Init( GPIOA, ARDUINO_D12 ) ;		// init PA6 as output (D12)
 80004a2:	2106      	movs	r1, #6
 80004a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004a8:	f7ff ff76 	bl	8000398 <GPIO_Output_Init>
	GPIO_Output_Init( GPIOA, ARDUINO_D11 ) ;		// init PA7 as output (D11)
 80004ac:	2107      	movs	r1, #7
 80004ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004b2:	f7ff ff71 	bl	8000398 <GPIO_Output_Init>
}
 80004b6:	bf00      	nop
 80004b8:	bd80      	pop	{r7, pc}

080004ba <LED_On>:

//******************************************************************************************
// Turn Green LED On and GPIOA 6 and 7 to ON
//******************************************************************************************
void LED_On(void){
 80004ba:	b480      	push	{r7}
 80004bc:	af00      	add	r7, sp, #0
	GPIOA->ODR |= (uint32_t)1 << NUCLEO_GREEN_LED_PIN ; // PA5
 80004be:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80004c2:	695b      	ldr	r3, [r3, #20]
 80004c4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80004c8:	f043 0320 	orr.w	r3, r3, #32
 80004cc:	6153      	str	r3, [r2, #20]
	GPIOA->ODR |= (uint32_t)1 << ARDUINO_D12 ;	// PA6
 80004ce:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80004d2:	695b      	ldr	r3, [r3, #20]
 80004d4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80004d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80004dc:	6153      	str	r3, [r2, #20]
	GPIOA->ODR |= (uint32_t)1 << ARDUINO_D11 ;	// PA7
 80004de:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80004e2:	695b      	ldr	r3, [r3, #20]
 80004e4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80004e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004ec:	6153      	str	r3, [r2, #20]
}
 80004ee:	bf00      	nop
 80004f0:	46bd      	mov	sp, r7
 80004f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f6:	4770      	bx	lr

080004f8 <LED_Off>:

//******************************************************************************************
// Turn Green LED Off and GPIOA 6 and 7 to OFF
//******************************************************************************************
void LED_Off(void){
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0
	GPIOA->ODR &= ~( (uint32_t)1 << NUCLEO_GREEN_LED_PIN );
 80004fc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000500:	695b      	ldr	r3, [r3, #20]
 8000502:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000506:	f023 0320 	bic.w	r3, r3, #32
 800050a:	6153      	str	r3, [r2, #20]
	GPIOA->ODR &= ~( (uint32_t)1 << ARDUINO_D12 ) ;	// PA6
 800050c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000510:	695b      	ldr	r3, [r3, #20]
 8000512:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000516:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800051a:	6153      	str	r3, [r2, #20]
	GPIOA->ODR &= ~( (uint32_t)1 << ARDUINO_D11 ) ;	// PA7
 800051c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000520:	695b      	ldr	r3, [r3, #20]
 8000522:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000526:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800052a:	6153      	str	r3, [r2, #20]
}
 800052c:	bf00      	nop
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr

08000536 <LED_Toggle>:

//******************************************************************************************
// Set Green LD2 Nucleo LED and GPIOA 6 and 7 to opposite states
//******************************************************************************************
void LED_Toggle(void){
 8000536:	b480      	push	{r7}
 8000538:	af00      	add	r7, sp, #0
	GPIOA->ODR ^= (uint32_t)1 << NUCLEO_GREEN_LED_PIN ;
 800053a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800053e:	695b      	ldr	r3, [r3, #20]
 8000540:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000544:	f083 0320 	eor.w	r3, r3, #32
 8000548:	6153      	str	r3, [r2, #20]
	GPIOA->ODR ^= (uint32_t)1 << ARDUINO_D12 ;	// PA6
 800054a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800054e:	695b      	ldr	r3, [r3, #20]
 8000550:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000554:	f083 0340 	eor.w	r3, r3, #64	; 0x40
 8000558:	6153      	str	r3, [r2, #20]
	GPIOA->ODR ^= (uint32_t)1 << ARDUINO_D11 ;	// PA7
 800055a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800055e:	695b      	ldr	r3, [r3, #20]
 8000560:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000564:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 8000568:	6153      	str	r3, [r2, #20]
}
 800056a:	bf00      	nop
 800056c:	46bd      	mov	sp, r7
 800056e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000572:	4770      	bx	lr

08000574 <System_Clock_Init>:
#include "SysClock.h"

//******************************************************************************************
// Switch the PLL source from MSI to HSI, and select the PLL as SYSCLK source.
//******************************************************************************************
void System_Clock_Init(void){
 8000574:	b480      	push	{r7}
 8000576:	b083      	sub	sp, #12
 8000578:	af00      	add	r7, sp, #0
	uint32_t HSITrim;

	// To correctly read data from FLASH memory, the number of wait states (LATENCY)
  // must be correctly programmed according to the frequency of the CPU clock
  // (HCLK) and the supply voltage of the device.		
	FLASH->ACR &= ~FLASH_ACR_LATENCY;
 800057a:	4b6b      	ldr	r3, [pc, #428]	; (8000728 <System_Clock_Init+0x1b4>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	4a6a      	ldr	r2, [pc, #424]	; (8000728 <System_Clock_Init+0x1b4>)
 8000580:	f023 0307 	bic.w	r3, r3, #7
 8000584:	6013      	str	r3, [r2, #0]
	FLASH->ACR |=  FLASH_ACR_LATENCY_2WS;
 8000586:	4b68      	ldr	r3, [pc, #416]	; (8000728 <System_Clock_Init+0x1b4>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	4a67      	ldr	r2, [pc, #412]	; (8000728 <System_Clock_Init+0x1b4>)
 800058c:	f043 0302 	orr.w	r3, r3, #2
 8000590:	6013      	str	r3, [r2, #0]
		
	// Enable the Internal High Speed oscillator (HSI
	RCC->CR |= RCC_CR_HSION;
 8000592:	4b66      	ldr	r3, [pc, #408]	; (800072c <System_Clock_Init+0x1b8>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	4a65      	ldr	r2, [pc, #404]	; (800072c <System_Clock_Init+0x1b8>)
 8000598:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800059c:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_HSIRDY) == 0);
 800059e:	bf00      	nop
 80005a0:	4b62      	ldr	r3, [pc, #392]	; (800072c <System_Clock_Init+0x1b8>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d0f9      	beq.n	80005a0 <System_Clock_Init+0x2c>
	// Adjusts the Internal High Speed oscillator (HSI) calibration value
	// RC oscillator frequencies are factory calibrated by ST for 1 % accuracy at 25oC
	// After reset, the factory calibration value is loaded in HSICAL[7:0] of RCC_ICSCR	
	HSITrim = 16; // user-programmable trimming value that is added to HSICAL[7:0] in ICSCR.
 80005ac:	2310      	movs	r3, #16
 80005ae:	607b      	str	r3, [r7, #4]
	RCC->ICSCR &= ~RCC_ICSCR_HSITRIM;
 80005b0:	4b5e      	ldr	r3, [pc, #376]	; (800072c <System_Clock_Init+0x1b8>)
 80005b2:	685b      	ldr	r3, [r3, #4]
 80005b4:	4a5d      	ldr	r2, [pc, #372]	; (800072c <System_Clock_Init+0x1b8>)
 80005b6:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 80005ba:	6053      	str	r3, [r2, #4]
	RCC->ICSCR |= HSITrim << 24;
 80005bc:	4b5b      	ldr	r3, [pc, #364]	; (800072c <System_Clock_Init+0x1b8>)
 80005be:	685a      	ldr	r2, [r3, #4]
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	061b      	lsls	r3, r3, #24
 80005c4:	4959      	ldr	r1, [pc, #356]	; (800072c <System_Clock_Init+0x1b8>)
 80005c6:	4313      	orrs	r3, r2
 80005c8:	604b      	str	r3, [r1, #4]
	
	RCC->CR    &= ~RCC_CR_PLLON; 
 80005ca:	4b58      	ldr	r3, [pc, #352]	; (800072c <System_Clock_Init+0x1b8>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	4a57      	ldr	r2, [pc, #348]	; (800072c <System_Clock_Init+0x1b8>)
 80005d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80005d4:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_PLLRDY) == RCC_CR_PLLRDY);
 80005d6:	bf00      	nop
 80005d8:	4b54      	ldr	r3, [pc, #336]	; (800072c <System_Clock_Init+0x1b8>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80005e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80005e4:	d0f8      	beq.n	80005d8 <System_Clock_Init+0x64>
	
	// Select clock source to PLL
	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLSRC;
 80005e6:	4b51      	ldr	r3, [pc, #324]	; (800072c <System_Clock_Init+0x1b8>)
 80005e8:	68db      	ldr	r3, [r3, #12]
 80005ea:	4a50      	ldr	r2, [pc, #320]	; (800072c <System_Clock_Init+0x1b8>)
 80005ec:	f023 0303 	bic.w	r3, r3, #3
 80005f0:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLSRC_HSI; // 00 = No clock, 01 = MSI, 10 = HSI, 11 = HSE
 80005f2:	4b4e      	ldr	r3, [pc, #312]	; (800072c <System_Clock_Init+0x1b8>)
 80005f4:	68db      	ldr	r3, [r3, #12]
 80005f6:	4a4d      	ldr	r2, [pc, #308]	; (800072c <System_Clock_Init+0x1b8>)
 80005f8:	f043 0302 	orr.w	r3, r3, #2
 80005fc:	60d3      	str	r3, [r2, #12]
	
	// Make PLL as 80 MHz
	// f(VCO clock) = f(PLL clock input) * (PLLN / PLLM) = 16MHz * 20/2 = 160 MHz
	// f(PLL_R) = f(VCO clock) / PLLR = 160MHz/2 = 80MHz
	RCC->PLLCFGR = (RCC->PLLCFGR & ~RCC_PLLCFGR_PLLN) | 20U << 8;
 80005fe:	4b4b      	ldr	r3, [pc, #300]	; (800072c <System_Clock_Init+0x1b8>)
 8000600:	68db      	ldr	r3, [r3, #12]
 8000602:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8000606:	4a49      	ldr	r2, [pc, #292]	; (800072c <System_Clock_Init+0x1b8>)
 8000608:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 800060c:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR = (RCC->PLLCFGR & ~RCC_PLLCFGR_PLLM) | 1U << 4; // 000: PLLM = 1, 001: PLLM = 2, 010: PLLM = 3, 011: PLLM = 4, 100: PLLM = 5, 101: PLLM = 6, 110: PLLM = 7, 111: PLLM = 8
 800060e:	4b47      	ldr	r3, [pc, #284]	; (800072c <System_Clock_Init+0x1b8>)
 8000610:	68db      	ldr	r3, [r3, #12]
 8000612:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000616:	4a45      	ldr	r2, [pc, #276]	; (800072c <System_Clock_Init+0x1b8>)
 8000618:	f043 0310 	orr.w	r3, r3, #16
 800061c:	60d3      	str	r3, [r2, #12]

	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLR;  // 00: PLLR = 2, 01: PLLR = 4, 10: PLLR = 6, 11: PLLR = 8	
 800061e:	4b43      	ldr	r3, [pc, #268]	; (800072c <System_Clock_Init+0x1b8>)
 8000620:	68db      	ldr	r3, [r3, #12]
 8000622:	4a42      	ldr	r2, [pc, #264]	; (800072c <System_Clock_Init+0x1b8>)
 8000624:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8000628:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLREN; // Enable Main PLL PLLCLK output 
 800062a:	4b40      	ldr	r3, [pc, #256]	; (800072c <System_Clock_Init+0x1b8>)
 800062c:	68db      	ldr	r3, [r3, #12]
 800062e:	4a3f      	ldr	r2, [pc, #252]	; (800072c <System_Clock_Init+0x1b8>)
 8000630:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000634:	60d3      	str	r3, [r2, #12]

	RCC->CR   |= RCC_CR_PLLON; 
 8000636:	4b3d      	ldr	r3, [pc, #244]	; (800072c <System_Clock_Init+0x1b8>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	4a3c      	ldr	r2, [pc, #240]	; (800072c <System_Clock_Init+0x1b8>)
 800063c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000640:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_PLLRDY) == 0);
 8000642:	bf00      	nop
 8000644:	4b39      	ldr	r3, [pc, #228]	; (800072c <System_Clock_Init+0x1b8>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800064c:	2b00      	cmp	r3, #0
 800064e:	d0f9      	beq.n	8000644 <System_Clock_Init+0xd0>
	
	// Select PLL selected as system clock
	RCC->CFGR &= ~RCC_CFGR_SW;
 8000650:	4b36      	ldr	r3, [pc, #216]	; (800072c <System_Clock_Init+0x1b8>)
 8000652:	689b      	ldr	r3, [r3, #8]
 8000654:	4a35      	ldr	r2, [pc, #212]	; (800072c <System_Clock_Init+0x1b8>)
 8000656:	f023 0303 	bic.w	r3, r3, #3
 800065a:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_SW_PLL; // 00: MSI, 01:HSI, 10: HSE, 11: PLL
 800065c:	4b33      	ldr	r3, [pc, #204]	; (800072c <System_Clock_Init+0x1b8>)
 800065e:	689b      	ldr	r3, [r3, #8]
 8000660:	4a32      	ldr	r2, [pc, #200]	; (800072c <System_Clock_Init+0x1b8>)
 8000662:	f043 0303 	orr.w	r3, r3, #3
 8000666:	6093      	str	r3, [r2, #8]
	
	// Wait until System Clock has been selected
	while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 8000668:	bf00      	nop
 800066a:	4b30      	ldr	r3, [pc, #192]	; (800072c <System_Clock_Init+0x1b8>)
 800066c:	689b      	ldr	r3, [r3, #8]
 800066e:	f003 030c 	and.w	r3, r3, #12
 8000672:	2b0c      	cmp	r3, #12
 8000674:	d1f9      	bne.n	800066a <System_Clock_Init+0xf6>
	
	// The maximum frequency of the AHB, the APB1 and the APB2 domains is 80 MHz.
	RCC->CFGR &= ~RCC_CFGR_HPRE;  // AHB prescaler = 1; SYSCLK not divided
 8000676:	4b2d      	ldr	r3, [pc, #180]	; (800072c <System_Clock_Init+0x1b8>)
 8000678:	689b      	ldr	r3, [r3, #8]
 800067a:	4a2c      	ldr	r2, [pc, #176]	; (800072c <System_Clock_Init+0x1b8>)
 800067c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000680:	6093      	str	r3, [r2, #8]
	RCC->CFGR &= ~RCC_CFGR_PPRE1; // APB high-speed prescaler (APB1) = 1, HCLK not divided
 8000682:	4b2a      	ldr	r3, [pc, #168]	; (800072c <System_Clock_Init+0x1b8>)
 8000684:	689b      	ldr	r3, [r3, #8]
 8000686:	4a29      	ldr	r2, [pc, #164]	; (800072c <System_Clock_Init+0x1b8>)
 8000688:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800068c:	6093      	str	r3, [r2, #8]
	RCC->CFGR &= ~RCC_CFGR_PPRE2; // APB high-speed prescaler (APB2) = 1, HCLK not divided
 800068e:	4b27      	ldr	r3, [pc, #156]	; (800072c <System_Clock_Init+0x1b8>)
 8000690:	689b      	ldr	r3, [r3, #8]
 8000692:	4a26      	ldr	r2, [pc, #152]	; (800072c <System_Clock_Init+0x1b8>)
 8000694:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000698:	6093      	str	r3, [r2, #8]
	// RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLP; 
	// RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLQ;	
	// RCC->PLLCFGR |= RCC_PLLCFGR_PLLPEN; // Enable Main PLL PLLSAI3CLK output enable
	// RCC->PLLCFGR |= RCC_PLLCFGR_PLLQEN; // Enable Main PLL PLL48M1CLK output enable
	
	RCC->CR &= ~RCC_CR_PLLSAI1ON;  // SAI1 PLL enable
 800069a:	4b24      	ldr	r3, [pc, #144]	; (800072c <System_Clock_Init+0x1b8>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	4a23      	ldr	r2, [pc, #140]	; (800072c <System_Clock_Init+0x1b8>)
 80006a0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80006a4:	6013      	str	r3, [r2, #0]
	while ( (RCC->CR & RCC_CR_PLLSAI1ON) == RCC_CR_PLLSAI1ON );
 80006a6:	bf00      	nop
 80006a8:	4b20      	ldr	r3, [pc, #128]	; (800072c <System_Clock_Init+0x1b8>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80006b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80006b4:	d0f8      	beq.n	80006a8 <System_Clock_Init+0x134>
	// 8 MHz * 24 / 17 = 11.294MHz
	// f(VCOSAI1 clock) = f(PLL clock input) *  (PLLSAI1N / PLLM)
	// PLLSAI1CLK: f(PLLSAI1_P) = f(VCOSAI1 clock) / PLLSAI1P
	// PLLUSB2CLK: f(PLLSAI1_Q) = f(VCOSAI1 clock) / PLLSAI1Q
	// PLLADC1CLK: f(PLLSAI1_R) = f(VCOSAI1 clock) / PLLSAI1R
	RCC->PLLSAI1CFGR &= ~RCC_PLLSAI1CFGR_PLLSAI1N;
 80006b6:	4b1d      	ldr	r3, [pc, #116]	; (800072c <System_Clock_Init+0x1b8>)
 80006b8:	691b      	ldr	r3, [r3, #16]
 80006ba:	4a1c      	ldr	r2, [pc, #112]	; (800072c <System_Clock_Init+0x1b8>)
 80006bc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80006c0:	6113      	str	r3, [r2, #16]
	RCC->PLLSAI1CFGR |= 24U<<8;
 80006c2:	4b1a      	ldr	r3, [pc, #104]	; (800072c <System_Clock_Init+0x1b8>)
 80006c4:	691b      	ldr	r3, [r3, #16]
 80006c6:	4a19      	ldr	r2, [pc, #100]	; (800072c <System_Clock_Init+0x1b8>)
 80006c8:	f443 53c0 	orr.w	r3, r3, #6144	; 0x1800
 80006cc:	6113      	str	r3, [r2, #16]
	
	// SAI1PLL division factor for PLLSAI1CLK
	// 0: PLLSAI1P = 7, 1: PLLSAI1P = 17
	RCC->PLLSAI1CFGR |= RCC_PLLSAI1CFGR_PLLSAI1P;
 80006ce:	4b17      	ldr	r3, [pc, #92]	; (800072c <System_Clock_Init+0x1b8>)
 80006d0:	691b      	ldr	r3, [r3, #16]
 80006d2:	4a16      	ldr	r2, [pc, #88]	; (800072c <System_Clock_Init+0x1b8>)
 80006d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006d8:	6113      	str	r3, [r2, #16]
	RCC->PLLSAI1CFGR |= RCC_PLLSAI1CFGR_PLLSAI1PEN;
 80006da:	4b14      	ldr	r3, [pc, #80]	; (800072c <System_Clock_Init+0x1b8>)
 80006dc:	691b      	ldr	r3, [r3, #16]
 80006de:	4a13      	ldr	r2, [pc, #76]	; (800072c <System_Clock_Init+0x1b8>)
 80006e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80006e4:	6113      	str	r3, [r2, #16]
	// 00: PLLSAI1R = 2, 01: PLLSAI1R = 4, 10: PLLSAI1R = 6, 11: PLLSAI1R = 8
	// RCC->PLLSAI1CFGR &= ~RCC_PLLSAI1CFGR_PLLSAI1R; 
	// RCC->PLLSAI1CFGR |= U<<25;
	// RCC->PLLSAI1CFGR |= RCC_PLLSAI1CFGR_PLLSAI1REN;
	
	RCC->CR |= RCC_CR_PLLSAI1ON;  // SAI1 PLL enable
 80006e6:	4b11      	ldr	r3, [pc, #68]	; (800072c <System_Clock_Init+0x1b8>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	4a10      	ldr	r2, [pc, #64]	; (800072c <System_Clock_Init+0x1b8>)
 80006ec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80006f0:	6013      	str	r3, [r2, #0]
	while ( (RCC->CR & RCC_CR_PLLSAI1ON) == 0);
 80006f2:	bf00      	nop
 80006f4:	4b0d      	ldr	r3, [pc, #52]	; (800072c <System_Clock_Init+0x1b8>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d0f9      	beq.n	80006f4 <System_Clock_Init+0x180>
	// SAI1 clock source selection
	// 00: PLLSAI1 "P" clock (PLLSAI1CLK) selected as SAI1 clock
	// 01: PLLSAI2 "P" clock (PLLSAI2CLK) selected as SAI1 clock
	// 10: PLL "P" clock (PLLSAI3CLK) selected as SAI1 clock
	// 11: External input SAI1_EXTCLK selected as SAI1 clock	
	RCC->CCIPR &= ~RCC_CCIPR_SAI1SEL;
 8000700:	4b0a      	ldr	r3, [pc, #40]	; (800072c <System_Clock_Init+0x1b8>)
 8000702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000706:	4a09      	ldr	r2, [pc, #36]	; (800072c <System_Clock_Init+0x1b8>)
 8000708:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800070c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	RCC->APB2ENR |= RCC_APB2ENR_SAI1EN;
 8000710:	4b06      	ldr	r3, [pc, #24]	; (800072c <System_Clock_Init+0x1b8>)
 8000712:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000714:	4a05      	ldr	r2, [pc, #20]	; (800072c <System_Clock_Init+0x1b8>)
 8000716:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800071a:	6613      	str	r3, [r2, #96]	; 0x60
}
 800071c:	bf00      	nop
 800071e:	370c      	adds	r7, #12
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr
 8000728:	40022000 	.word	0x40022000
 800072c:	40021000 	.word	0x40021000

08000730 <UART2_Init>:
// PA.3 = USART2_RX (AF7)

#define TX_PIN 2
#define RX_PIN 3

void UART2_Init(void) {
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
	// Enable the clock of USART 1 & 2
	RCC->APB1ENR1 |= RCC_APB1ENR1_USART2EN;  // Enable USART 2 clock		
 8000734:	4b0e      	ldr	r3, [pc, #56]	; (8000770 <UART2_Init+0x40>)
 8000736:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000738:	4a0d      	ldr	r2, [pc, #52]	; (8000770 <UART2_Init+0x40>)
 800073a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800073e:	6593      	str	r3, [r2, #88]	; 0x58
	// Select the USART1 clock source
	// 00: PCLK selected as USART2 clock
	// 01: System clock (SYSCLK) selected as USART2 clock
	// 10: HSI16 clock selected as USART2 clock
	// 11: LSE clock selected as USART2 clock
	RCC->CCIPR &= ~RCC_CCIPR_USART2SEL;
 8000740:	4b0b      	ldr	r3, [pc, #44]	; (8000770 <UART2_Init+0x40>)
 8000742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000746:	4a0a      	ldr	r2, [pc, #40]	; (8000770 <UART2_Init+0x40>)
 8000748:	f023 030c 	bic.w	r3, r3, #12
 800074c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	RCC->CCIPR |=  RCC_CCIPR_USART2SEL_0;
 8000750:	4b07      	ldr	r3, [pc, #28]	; (8000770 <UART2_Init+0x40>)
 8000752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000756:	4a06      	ldr	r2, [pc, #24]	; (8000770 <UART2_Init+0x40>)
 8000758:	f043 0304 	orr.w	r3, r3, #4
 800075c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	
	UART2_GPIO_Init();
 8000760:	f000 f80a 	bl	8000778 <UART2_GPIO_Init>
	USART_Init(USART2);
 8000764:	4803      	ldr	r0, [pc, #12]	; (8000774 <UART2_Init+0x44>)
 8000766:	f000 f84f 	bl	8000808 <USART_Init>
	
	//NVIC_SetPriority(USART2_IRQn, 0);			// Set Priority to 1
	//NVIC_EnableIRQ(USART2_IRQn);					// Enable interrupt of USART1 peripheral
}
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	40021000 	.word	0x40021000
 8000774:	40004400 	.word	0x40004400

08000778 <UART2_GPIO_Init>:

void UART2_GPIO_Init(void) {
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
	
	// Enable the peripheral clock of GPIO Port
	RCC->AHB2ENR |=   RCC_AHB2ENR_GPIOAEN;
 800077c:	4b21      	ldr	r3, [pc, #132]	; (8000804 <UART2_GPIO_Init+0x8c>)
 800077e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000780:	4a20      	ldr	r2, [pc, #128]	; (8000804 <UART2_GPIO_Init+0x8c>)
 8000782:	f043 0301 	orr.w	r3, r3, #1
 8000786:	64d3      	str	r3, [r2, #76]	; 0x4c
	// PA2 = USART2_TX (AF7)
	// PA3 = USART2_RX (AF7)
	// Alternate function, High Speed, Push pull, Pull up
	// **********************************************************
	// Input(00), Output(01), AlterFunc(10), Analog(11)
	GPIOA->MODER   &= ~(3<<(2*TX_PIN) | 3<<(2*RX_PIN));	// Clear bits
 8000788:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000792:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000796:	6013      	str	r3, [r2, #0]
	GPIOA->MODER   |=   2<<(2*TX_PIN) | 2<<(2*RX_PIN); 
 8000798:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80007a2:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80007a6:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0]  &= ~(0xF<<(4*TX_PIN) | 0xF<<(4*RX_PIN));	
 80007a8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80007ac:	6a1b      	ldr	r3, [r3, #32]
 80007ae:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80007b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80007b6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]  |=   7<<(4*TX_PIN) | 7<<(4*RX_PIN);       	
 80007b8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80007bc:	6a1b      	ldr	r3, [r3, #32]
 80007be:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80007c2:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 80007c6:	6213      	str	r3, [r2, #32]
	// GPIO Speed: Low speed (00), Medium speed (01), Fast speed (10), High speed (11)
	GPIOA->OSPEEDR |=   3<<(2*TX_PIN) | 3<<(2*RX_PIN); 					 	
 80007c8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80007cc:	689b      	ldr	r3, [r3, #8]
 80007ce:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80007d2:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 80007d6:	6093      	str	r3, [r2, #8]
	// GPIO Push-Pull: No pull-up, pull-down (00), Pull-up (01), Pull-down (10), Reserved (11)
	GPIOA->PUPDR   &= ~(3<<(2*TX_PIN) | 3<<(2*RX_PIN));
 80007d8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80007dc:	68db      	ldr	r3, [r3, #12]
 80007de:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80007e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80007e6:	60d3      	str	r3, [r2, #12]
	// GPIO Output Type: Output push-pull (0, reset), Output open drain (1) 
	GPIOA->OTYPER  &=  ~(1<<TX_PIN | 1<<RX_PIN);       	
 80007e8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80007ec:	685b      	ldr	r3, [r3, #4]
 80007ee:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80007f2:	f023 030c 	bic.w	r3, r3, #12
 80007f6:	6053      	str	r3, [r2, #4]
}
 80007f8:	bf00      	nop
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	40021000 	.word	0x40021000

08000808 <USART_Init>:


void USART_Init (USART_TypeDef * USARTx) {
 8000808:	b480      	push	{r7}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
	// Default setting: 
	//     No hardware flow control, 8 data bits, no parity, 1 start bit and 1 stop bit		
	USARTx->CR1 &= ~USART_CR1_UE;  // Disable USART
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	f023 0201 	bic.w	r2, r3, #1
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	601a      	str	r2, [r3, #0]
	
	// Configure word length to 8 bit
	USARTx->CR1 &= ~USART_CR1_M;   // M: 00 = 8 data bits, 01 = 9 data bits, 10 = 7 data bits
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	f023 2210 	bic.w	r2, r3, #268439552	; 0x10001000
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	601a      	str	r2, [r3, #0]
	
	// Configure oversampling mode: Oversampling by 16 
	USARTx->CR1 &= ~USART_CR1_OVER8;  // 0 = oversampling by 16, 1 = oversampling by 8
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	601a      	str	r2, [r3, #0]
	
	// Configure stop bits to 1 stop bit
	//   00: 1 Stop bit;      01: 0.5 Stop bit
	//   10: 2 Stop bits;     11: 1.5 Stop bit
	USARTx->CR2 &= ~USART_CR2_STOP;   
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	685b      	ldr	r3, [r3, #4]
 8000838:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	605a      	str	r2, [r3, #4]
	// CSet Baudrate to 9600 using APB frequency (80,000,000 Hz)
	// If oversampling by 16, Tx/Rx baud = f_CK / USARTDIV,  
	// If oversampling by 8,  Tx/Rx baud = 2*f_CK / USARTDIV
  // When OVER8 = 0, BRR = USARTDIV
	// USARTDIV = 80MHz/9600 = 8333 = 0x208D
	USARTx->BRR  = 0x208D; // Limited to 16 bits
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	f242 028d 	movw	r2, #8333	; 0x208d
 8000846:	60da      	str	r2, [r3, #12]

	USARTx->CR1  |= (USART_CR1_RE | USART_CR1_TE);  	// Transmitter and Receiver enable
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	f043 020c 	orr.w	r2, r3, #12
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	601a      	str	r2, [r3, #0]
	
  if (USARTx == UART4){	
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	4a2c      	ldr	r2, [pc, #176]	; (8000908 <USART_Init+0x100>)
 8000858:	4293      	cmp	r3, r2
 800085a:	d129      	bne.n	80008b0 <USART_Init+0xa8>
		USARTx->CR1 |= USART_CR1_RXNEIE;  			// Received Data Ready to be Read Interrupt  
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	f043 0220 	orr.w	r2, r3, #32
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_TCIE;    			// Transmission Complete Interrupt 
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_IDLEIE;  			// Idle Line Detected Interrupt 
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	f023 0210 	bic.w	r2, r3, #16
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_TXEIE;   			// Transmit Data Register Empty Interrupt 
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_PEIE;    			// Parity Error Interrupt 
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR2_LBDIE;				// LIN Break Detection Interrupt Enable
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR3_EIE;					// Error Interrupt Enable (Frame error, noise error, overrun error) 
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	f023 0201 	bic.w	r2, r3, #1
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	601a      	str	r2, [r3, #0]
		//USARTx->CR3 &= ~USART_CR3_CTSIE;				// CTS Interrupt
	}

	if (USARTx == USART2){
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	4a16      	ldr	r2, [pc, #88]	; (800090c <USART_Init+0x104>)
 80008b4:	4293      	cmp	r3, r2
 80008b6:	d10b      	bne.n	80008d0 <USART_Init+0xc8>
		USARTx->ICR |= USART_ICR_TCCF;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	6a1b      	ldr	r3, [r3, #32]
 80008bc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	621a      	str	r2, [r3, #32]
		USART1->CR3 |= USART_CR3_DMAT | USART_CR3_DMAR;
 80008c4:	4b12      	ldr	r3, [pc, #72]	; (8000910 <USART_Init+0x108>)
 80008c6:	689b      	ldr	r3, [r3, #8]
 80008c8:	4a11      	ldr	r2, [pc, #68]	; (8000910 <USART_Init+0x108>)
 80008ca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80008ce:	6093      	str	r3, [r2, #8]
	}
	
	USARTx->CR1  |= USART_CR1_UE; // USART enable                 
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	f043 0201 	orr.w	r2, r3, #1
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	601a      	str	r2, [r3, #0]
	
	while ( (USARTx->ISR & USART_ISR_TEACK) == 0); // Verify that the USART is ready for reception
 80008dc:	bf00      	nop
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	69db      	ldr	r3, [r3, #28]
 80008e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d0f9      	beq.n	80008de <USART_Init+0xd6>
	while ( (USARTx->ISR & USART_ISR_REACK) == 0); // Verify that the USART is ready for transmission
 80008ea:	bf00      	nop
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	69db      	ldr	r3, [r3, #28]
 80008f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d0f9      	beq.n	80008ec <USART_Init+0xe4>
}
 80008f8:	bf00      	nop
 80008fa:	bf00      	nop
 80008fc:	370c      	adds	r7, #12
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop
 8000908:	40004c00 	.word	0x40004c00
 800090c:	40004400 	.word	0x40004400
 8000910:	40013800 	.word	0x40013800

08000914 <USART_Read_nonblocking>:
	// USART resets the RXNE flag automatically after reading DR
	return ((uint8_t)(USARTx->RDR & 0xFF));
	// Reading USART_DR automatically clears the RXNE flag 
}

uint8_t USART_Read_nonblocking (USART_TypeDef * USARTx) {
 8000914:	b480      	push	{r7}
 8000916:	b083      	sub	sp, #12
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
	if(USARTx->ISR & USART_ISR_RXNE){
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	69db      	ldr	r3, [r3, #28]
 8000920:	f003 0320 	and.w	r3, r3, #32
 8000924:	2b00      	cmp	r3, #0
 8000926:	d004      	beq.n	8000932 <USART_Read_nonblocking+0x1e>
		return ((uint8_t) (USARTx->RDR & 0xFF));
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800092c:	b29b      	uxth	r3, r3
 800092e:	b2db      	uxtb	r3, r3
 8000930:	e000      	b.n	8000934 <USART_Read_nonblocking+0x20>
	}
	return 0;
 8000932:	2300      	movs	r3, #0
}
 8000934:	4618      	mov	r0, r3
 8000936:	370c      	adds	r7, #12
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr

08000940 <USART_Write>:

void USART_Write(USART_TypeDef * USARTx, uint8_t *buffer, uint32_t nBytes) {
 8000940:	b580      	push	{r7, lr}
 8000942:	b086      	sub	sp, #24
 8000944:	af00      	add	r7, sp, #0
 8000946:	60f8      	str	r0, [r7, #12]
 8000948:	60b9      	str	r1, [r7, #8]
 800094a:	607a      	str	r2, [r7, #4]
	int i;
	// TXE is cleared by a write to the USART_DR register.
	// TXE is set by hardware when the content of the TDR 
	// register has been transferred into the shift register.
	for (i = 0; i < nBytes; i++) {
 800094c:	2300      	movs	r3, #0
 800094e:	617b      	str	r3, [r7, #20]
 8000950:	e014      	b.n	800097c <USART_Write+0x3c>
		while (!(USARTx->ISR & USART_ISR_TXE));   	// wait until TXE (TX empty) bit is set
 8000952:	bf00      	nop
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	69db      	ldr	r3, [r3, #28]
 8000958:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800095c:	2b00      	cmp	r3, #0
 800095e:	d0f9      	beq.n	8000954 <USART_Write+0x14>
		// Writing USART_DR automatically clears the TXE flag 	
		USARTx->TDR = buffer[i] & 0xFF;
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	68ba      	ldr	r2, [r7, #8]
 8000964:	4413      	add	r3, r2
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	b29a      	uxth	r2, r3
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	851a      	strh	r2, [r3, #40]	; 0x28
		USART_Delay(300);
 800096e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000972:	f000 f819 	bl	80009a8 <USART_Delay>
	for (i = 0; i < nBytes; i++) {
 8000976:	697b      	ldr	r3, [r7, #20]
 8000978:	3301      	adds	r3, #1
 800097a:	617b      	str	r3, [r7, #20]
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	687a      	ldr	r2, [r7, #4]
 8000980:	429a      	cmp	r2, r3
 8000982:	d8e6      	bhi.n	8000952 <USART_Write+0x12>
	}
	while (!(USARTx->ISR & USART_ISR_TC));   		  // wait until TC bit is set
 8000984:	bf00      	nop
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	69db      	ldr	r3, [r3, #28]
 800098a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800098e:	2b00      	cmp	r3, #0
 8000990:	d0f9      	beq.n	8000986 <USART_Write+0x46>
	USARTx->ISR &= ~USART_ISR_TC;
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	69db      	ldr	r3, [r3, #28]
 8000996:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	61da      	str	r2, [r3, #28]
}   
 800099e:	bf00      	nop
 80009a0:	3718      	adds	r7, #24
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
	...

080009a8 <USART_Delay>:
 

void USART_Delay(uint32_t us) {
 80009a8:	b480      	push	{r7}
 80009aa:	b085      	sub	sp, #20
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
	uint32_t time = 100*us/7;    
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	2264      	movs	r2, #100	; 0x64
 80009b4:	fb03 f202 	mul.w	r2, r3, r2
 80009b8:	4b0a      	ldr	r3, [pc, #40]	; (80009e4 <USART_Delay+0x3c>)
 80009ba:	fba3 1302 	umull	r1, r3, r3, r2
 80009be:	1ad2      	subs	r2, r2, r3
 80009c0:	0852      	lsrs	r2, r2, #1
 80009c2:	4413      	add	r3, r2
 80009c4:	089b      	lsrs	r3, r3, #2
 80009c6:	60fb      	str	r3, [r7, #12]
	while(--time);   
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	3b01      	subs	r3, #1
 80009cc:	60fb      	str	r3, [r7, #12]
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d1f9      	bne.n	80009c8 <USART_Delay+0x20>
}
 80009d4:	bf00      	nop
 80009d6:	bf00      	nop
 80009d8:	3714      	adds	r7, #20
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	24924925 	.word	0x24924925

080009e8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b08a      	sub	sp, #40	; 0x28
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f0:	f107 0314 	add.w	r3, r7, #20
 80009f4:	2200      	movs	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]
 80009f8:	605a      	str	r2, [r3, #4]
 80009fa:	609a      	str	r2, [r3, #8]
 80009fc:	60da      	str	r2, [r3, #12]
 80009fe:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a15      	ldr	r2, [pc, #84]	; (8000a5c <HAL_DAC_MspInit+0x74>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d124      	bne.n	8000a54 <HAL_DAC_MspInit+0x6c>
  {
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000a0a:	4b15      	ldr	r3, [pc, #84]	; (8000a60 <HAL_DAC_MspInit+0x78>)
 8000a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a0e:	4a14      	ldr	r2, [pc, #80]	; (8000a60 <HAL_DAC_MspInit+0x78>)
 8000a10:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000a14:	6593      	str	r3, [r2, #88]	; 0x58
 8000a16:	4b12      	ldr	r3, [pc, #72]	; (8000a60 <HAL_DAC_MspInit+0x78>)
 8000a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000a1e:	613b      	str	r3, [r7, #16]
 8000a20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a22:	4b0f      	ldr	r3, [pc, #60]	; (8000a60 <HAL_DAC_MspInit+0x78>)
 8000a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a26:	4a0e      	ldr	r2, [pc, #56]	; (8000a60 <HAL_DAC_MspInit+0x78>)
 8000a28:	f043 0301 	orr.w	r3, r3, #1
 8000a2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a2e:	4b0c      	ldr	r3, [pc, #48]	; (8000a60 <HAL_DAC_MspInit+0x78>)
 8000a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a32:	f003 0301 	and.w	r3, r3, #1
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000a3a:	2310      	movs	r3, #16
 8000a3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a3e:	2303      	movs	r3, #3
 8000a40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a46:	f107 0314 	add.w	r3, r7, #20
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a50:	f001 fa40 	bl	8001ed4 <HAL_GPIO_Init>
  }

}
 8000a54:	bf00      	nop
 8000a56:	3728      	adds	r7, #40	; 0x28
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	40007400 	.word	0x40007400
 8000a60:	40021000 	.word	0x40021000

08000a64 <DAC_Init>:
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_4);
  }

}

void DAC_Init () {
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b08a      	sub	sp, #40	; 0x28
 8000a68:	af00      	add	r7, sp, #0
	DAC_ChannelConfTypeDef sConfig = {0};
 8000a6a:	1d3b      	adds	r3, r7, #4
 8000a6c:	2224      	movs	r2, #36	; 0x24
 8000a6e:	2100      	movs	r1, #0
 8000a70:	4618      	mov	r0, r3
 8000a72:	f001 fc59 	bl	8002328 <memset>

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000a76:	4b12      	ldr	r3, [pc, #72]	; (8000ac0 <DAC_Init+0x5c>)
 8000a78:	4a12      	ldr	r2, [pc, #72]	; (8000ac4 <DAC_Init+0x60>)
 8000a7a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000a7c:	4810      	ldr	r0, [pc, #64]	; (8000ac0 <DAC_Init+0x5c>)
 8000a7e:	f001 f87b 	bl	8001b78 <HAL_DAC_Init>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <DAC_Init+0x28>
  {
    Error_Handler();
 8000a88:	f000 fa1a 	bl	8000ec0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000a90:	2300      	movs	r3, #0
 8000a92:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000a94:	2300      	movs	r3, #0
 8000a96:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	617b      	str	r3, [r7, #20]

  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000aa0:	1d3b      	adds	r3, r7, #4
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4806      	ldr	r0, [pc, #24]	; (8000ac0 <DAC_Init+0x5c>)
 8000aa8:	f001 f8fa 	bl	8001ca0 <HAL_DAC_ConfigChannel>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <DAC_Init+0x52>
  {
    Error_Handler();
 8000ab2:	f000 fa05 	bl	8000ec0 <Error_Handler>
  }
}
 8000ab6:	bf00      	nop
 8000ab8:	3728      	adds	r7, #40	; 0x28
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	20011738 	.word	0x20011738
 8000ac4:	40007400 	.word	0x40007400

08000ac8 <DAC_Start>:

void DAC_Start () {
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
	HAL_DAC_Start (&hdac1, DAC_CHANNEL_1);
 8000acc:	2100      	movs	r1, #0
 8000ace:	4802      	ldr	r0, [pc, #8]	; (8000ad8 <DAC_Start+0x10>)
 8000ad0:	f001 f874 	bl	8001bbc <HAL_DAC_Start>
}
 8000ad4:	bf00      	nop
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	20011738 	.word	0x20011738

08000adc <DAC_Set_Value>:

void DAC_Set_Value (uint32_t value) {
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
	HAL_DAC_SetValue (&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, value);
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	2100      	movs	r1, #0
 8000aea:	4803      	ldr	r0, [pc, #12]	; (8000af8 <DAC_Set_Value+0x1c>)
 8000aec:	f001 f8b3 	bl	8001c56 <HAL_DAC_SetValue>
}
 8000af0:	bf00      	nop
 8000af2:	3708      	adds	r7, #8
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	20011738 	.word	0x20011738

08000afc <init_systick>:
//		;
//}

// This function is to Initialize SysTick registers
static void init_systick()
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
	// Use the SysTick global structure pointer to do the following in this
	// exact order with separate lines for each step:
	//
	// Disable SysTick by clearing the CTRL (CSR) register.
	systick_t* p_systick = get_systick_registers();
 8000b02:	f000 fef1 	bl	80018e8 <get_systick_registers>
 8000b06:	6078      	str	r0, [r7, #4]
	p_systick->SYST_CSR &= ~(0xFFFFFFF);
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	601a      	str	r2, [r3, #0]
	// Set the LOAD (RVR) to 8 million to give us a 100 milliseconds timer.
	p_systick->SYST_RVR = 799;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	f240 321f 	movw	r2, #799	; 0x31f
 8000b1a:	605a      	str	r2, [r3, #4]
	// Set the clock source bit in the CTRL (CSR) to the internal clock.
	p_systick->SYST_CSR |= 1 << 2;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	f043 0204 	orr.w	r2, r3, #4
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	601a      	str	r2, [r3, #0]
	// Set the enable bit in the CTRL (CSR) to start the timer.
	p_systick->SYST_CSR |= 1 << 0;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	f043 0201 	orr.w	r2, r3, #1
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	601a      	str	r2, [r3, #0]

	// Set the interrupt bit to be enabled
	p_systick->SYST_CSR |= 1 << 1;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	f043 0202 	orr.w	r2, r3, #2
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	601a      	str	r2, [r3, #0]
}
 8000b40:	bf00      	nop
 8000b42:	3708      	adds	r7, #8
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <pause>:

/*
 * This will pause or have the light flashing
 * from the interrupt
 */
void pause(){
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
	blink = 1;
 8000b4c:	4b03      	ldr	r3, [pc, #12]	; (8000b5c <pause+0x14>)
 8000b4e:	2201      	movs	r2, #1
 8000b50:	701a      	strb	r2, [r3, #0]
}
 8000b52:	bf00      	nop
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr
 8000b5c:	20011758 	.word	0x20011758

08000b60 <unpause>:

/*
 * This will unpause or have the light flashing
 * from the interrupt
 */
void unpause(){
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
	blink = 0;
 8000b64:	4b03      	ldr	r3, [pc, #12]	; (8000b74 <unpause+0x14>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	701a      	strb	r2, [r3, #0]
}
 8000b6a:	bf00      	nop
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr
 8000b74:	20011758 	.word	0x20011758

08000b78 <SysTick_Handler>:

/*
 * This will help do timer counting for various
 * uses
 */
void SysTick_Handler() {
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
		counter++;
 8000b7c:	4b17      	ldr	r3, [pc, #92]	; (8000bdc <SysTick_Handler+0x64>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	3301      	adds	r3, #1
 8000b82:	4a16      	ldr	r2, [pc, #88]	; (8000bdc <SysTick_Handler+0x64>)
 8000b84:	6013      	str	r3, [r2, #0]
		second_counter++;
 8000b86:	4b16      	ldr	r3, [pc, #88]	; (8000be0 <SysTick_Handler+0x68>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	3301      	adds	r3, #1
 8000b8c:	4a14      	ldr	r2, [pc, #80]	; (8000be0 <SysTick_Handler+0x68>)
 8000b8e:	6013      	str	r3, [r2, #0]
		tone_counter++;
 8000b90:	4b14      	ldr	r3, [pc, #80]	; (8000be4 <SysTick_Handler+0x6c>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	3301      	adds	r3, #1
 8000b96:	4a13      	ldr	r2, [pc, #76]	; (8000be4 <SysTick_Handler+0x6c>)
 8000b98:	6013      	str	r3, [r2, #0]
		delay_counter++;
 8000b9a:	4b13      	ldr	r3, [pc, #76]	; (8000be8 <SysTick_Handler+0x70>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	4a11      	ldr	r2, [pc, #68]	; (8000be8 <SysTick_Handler+0x70>)
 8000ba2:	6013      	str	r3, [r2, #0]
	if(counter == 100000){
 8000ba4:	4b0d      	ldr	r3, [pc, #52]	; (8000bdc <SysTick_Handler+0x64>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a10      	ldr	r2, [pc, #64]	; (8000bec <SysTick_Handler+0x74>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d108      	bne.n	8000bc0 <SysTick_Handler+0x48>
		one_second_elapsed = 1;
 8000bae:	4b10      	ldr	r3, [pc, #64]	; (8000bf0 <SysTick_Handler+0x78>)
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	701a      	strb	r2, [r3, #0]
		one_second = 1;
 8000bb4:	4b0f      	ldr	r3, [pc, #60]	; (8000bf4 <SysTick_Handler+0x7c>)
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	701a      	strb	r2, [r3, #0]
		counter = 0;
 8000bba:	4b08      	ldr	r3, [pc, #32]	; (8000bdc <SysTick_Handler+0x64>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
	}
	if(second_counter == 100000){
 8000bc0:	4b07      	ldr	r3, [pc, #28]	; (8000be0 <SysTick_Handler+0x68>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a09      	ldr	r2, [pc, #36]	; (8000bec <SysTick_Handler+0x74>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d102      	bne.n	8000bd0 <SysTick_Handler+0x58>
		stopper = 1;
 8000bca:	4b0b      	ldr	r3, [pc, #44]	; (8000bf8 <SysTick_Handler+0x80>)
 8000bcc:	2201      	movs	r2, #1
 8000bce:	701a      	strb	r2, [r3, #0]
	}
}
 8000bd0:	bf00      	nop
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	20011750 	.word	0x20011750
 8000be0:	2001175c 	.word	0x2001175c
 8000be4:	20017868 	.word	0x20017868
 8000be8:	20011760 	.word	0x20011760
 8000bec:	000186a0 	.word	0x000186a0
 8000bf0:	20011755 	.word	0x20011755
 8000bf4:	20011756 	.word	0x20011756
 8000bf8:	20011757 	.word	0x20011757

08000bfc <remote_on>:

/*
 * This will turn the remote access from putty
 */
void remote_on(){
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
	remote = 1;
 8000c00:	4b03      	ldr	r3, [pc, #12]	; (8000c10 <remote_on+0x14>)
 8000c02:	2201      	movs	r2, #1
 8000c04:	701a      	strb	r2, [r3, #0]
}
 8000c06:	bf00      	nop
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr
 8000c10:	200114a8 	.word	0x200114a8

08000c14 <remote_off>:

/*
 * This will set the mode into more local for a super user
 */
void remote_off(){
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
	remote = 0;
 8000c18:	4b03      	ldr	r3, [pc, #12]	; (8000c28 <remote_off+0x14>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	701a      	strb	r2, [r3, #0]
}
 8000c1e:	bf00      	nop
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr
 8000c28:	200114a8 	.word	0x200114a8

08000c2c <local_song>:

/*
 * This will get the song itself for the interrupts
 */
unsigned char * local_song(int player){
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
	return songs[player].p_song;
 8000c34:	4a04      	ldr	r2, [pc, #16]	; (8000c48 <local_song+0x1c>)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	370c      	adds	r7, #12
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr
 8000c48:	20011478 	.word	0x20011478

08000c4c <local_song_size>:

/*
 * This will get the size of the song for the interrupts
 */
uint32_t local_song_size(int player){
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
	return songs[player].size;
 8000c54:	4a05      	ldr	r2, [pc, #20]	; (8000c6c <local_song_size+0x20>)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	00db      	lsls	r3, r3, #3
 8000c5a:	4413      	add	r3, r2
 8000c5c:	685b      	ldr	r3, [r3, #4]
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	370c      	adds	r7, #12
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	20011478 	.word	0x20011478

08000c70 <local_play_song>:

/*
 * This will play the song from the interrupt
 */
void local_play_song(){
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
	p = 1;
 8000c74:	4b03      	ldr	r3, [pc, #12]	; (8000c84 <local_play_song+0x14>)
 8000c76:	2201      	movs	r2, #1
 8000c78:	701a      	strb	r2, [r3, #0]
}
 8000c7a:	bf00      	nop
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr
 8000c84:	2001176c 	.word	0x2001176c

08000c88 <run_project>:
/*
 * This function is the head where it will
 * run the application and getting all of the
 * commands typed as well as handling any interrupts
 */
void run_project(){
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
	one_second = 0;
 8000c8e:	4b78      	ldr	r3, [pc, #480]	; (8000e70 <run_project+0x1e8>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	701a      	strb	r2, [r3, #0]
	uint8_t letter = 0;
 8000c94:	2300      	movs	r3, #0
 8000c96:	71fb      	strb	r3, [r7, #7]
	char buffer[6] = {0};
 8000c98:	2300      	movs	r3, #0
 8000c9a:	603b      	str	r3, [r7, #0]
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	80bb      	strh	r3, [r7, #4]
	help_me();
 8000ca0:	f000 fa2c 	bl	80010fc <help_me>
	prints("\n\r***REMOTE MODE ACTIVE***\n\r");
 8000ca4:	4873      	ldr	r0, [pc, #460]	; (8000e74 <run_project+0x1ec>)
 8000ca6:	f000 fd95 	bl	80017d4 <prints>
	GPIO_Init();
 8000caa:	f7ff fb0f 	bl	80002cc <GPIO_Init>
	while(1){
		letter = USART_Read_nonblocking( USART2 );
 8000cae:	4872      	ldr	r0, [pc, #456]	; (8000e78 <run_project+0x1f0>)
 8000cb0:	f7ff fe30 	bl	8000914 <USART_Read_nonblocking>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	71fb      	strb	r3, [r7, #7]
		if(p == 1){
 8000cb8:	4b70      	ldr	r3, [pc, #448]	; (8000e7c <run_project+0x1f4>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	2b01      	cmp	r3, #1
 8000cbe:	d10a      	bne.n	8000cd6 <run_project+0x4e>
			play_song(a_song, size);
 8000cc0:	4b6f      	ldr	r3, [pc, #444]	; (8000e80 <run_project+0x1f8>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a6f      	ldr	r2, [pc, #444]	; (8000e84 <run_project+0x1fc>)
 8000cc6:	6812      	ldr	r2, [r2, #0]
 8000cc8:	4611      	mov	r1, r2
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f000 fc48 	bl	8001560 <play_song>
			p = 0;
 8000cd0:	4b6a      	ldr	r3, [pc, #424]	; (8000e7c <run_project+0x1f4>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	701a      	strb	r2, [r3, #0]
		}
		if((blink == 1) && (one_second_elapsed == 1)){
 8000cd6:	4b6c      	ldr	r3, [pc, #432]	; (8000e88 <run_project+0x200>)
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	2b01      	cmp	r3, #1
 8000cdc:	d109      	bne.n	8000cf2 <run_project+0x6a>
 8000cde:	4b6b      	ldr	r3, [pc, #428]	; (8000e8c <run_project+0x204>)
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	2b01      	cmp	r3, #1
 8000ce6:	d104      	bne.n	8000cf2 <run_project+0x6a>
			LED_Toggle();
 8000ce8:	f7ff fc25 	bl	8000536 <LED_Toggle>
			one_second_elapsed = 0;
 8000cec:	4b67      	ldr	r3, [pc, #412]	; (8000e8c <run_project+0x204>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	701a      	strb	r2, [r3, #0]
		}
		if(remote == 1){
 8000cf2:	4b67      	ldr	r3, [pc, #412]	; (8000e90 <run_project+0x208>)
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	2b01      	cmp	r3, #1
 8000cf8:	d1d9      	bne.n	8000cae <run_project+0x26>
			if(letter == 13){
 8000cfa:	79fb      	ldrb	r3, [r7, #7]
 8000cfc:	2b0d      	cmp	r3, #13
 8000cfe:	d17f      	bne.n	8000e00 <run_project+0x178>
				indexer = 0;
 8000d00:	4b64      	ldr	r3, [pc, #400]	; (8000e94 <run_project+0x20c>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	701a      	strb	r2, [r3, #0]
				prints("%c\n", letter);
 8000d06:	79fb      	ldrb	r3, [r7, #7]
 8000d08:	4619      	mov	r1, r3
 8000d0a:	4863      	ldr	r0, [pc, #396]	; (8000e98 <run_project+0x210>)
 8000d0c:	f000 fd62 	bl	80017d4 <prints>
				if(strcmp(buffer, "HELP") == 0){
 8000d10:	463b      	mov	r3, r7
 8000d12:	4962      	ldr	r1, [pc, #392]	; (8000e9c <run_project+0x214>)
 8000d14:	4618      	mov	r0, r3
 8000d16:	f7ff fa5b 	bl	80001d0 <strcmp>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d102      	bne.n	8000d26 <run_project+0x9e>
					help_me();
 8000d20:	f000 f9ec 	bl	80010fc <help_me>
 8000d24:	e065      	b.n	8000df2 <run_project+0x16a>
				}
				else if(strcmp(buffer, "PLAY") == 0){
 8000d26:	463b      	mov	r3, r7
 8000d28:	495d      	ldr	r1, [pc, #372]	; (8000ea0 <run_project+0x218>)
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f7ff fa50 	bl	80001d0 <strcmp>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d111      	bne.n	8000d5a <run_project+0xd2>
					blink = 0;
 8000d36:	4b54      	ldr	r3, [pc, #336]	; (8000e88 <run_project+0x200>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	701a      	strb	r2, [r3, #0]
					LED_On();
 8000d3c:	f7ff fbbd 	bl	80004ba <LED_On>
					if(a_song != 0){
 8000d40:	4b4f      	ldr	r3, [pc, #316]	; (8000e80 <run_project+0x1f8>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d054      	beq.n	8000df2 <run_project+0x16a>
						play_song(a_song, size);
 8000d48:	4b4d      	ldr	r3, [pc, #308]	; (8000e80 <run_project+0x1f8>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a4d      	ldr	r2, [pc, #308]	; (8000e84 <run_project+0x1fc>)
 8000d4e:	6812      	ldr	r2, [r2, #0]
 8000d50:	4611      	mov	r1, r2
 8000d52:	4618      	mov	r0, r3
 8000d54:	f000 fc04 	bl	8001560 <play_song>
 8000d58:	e04b      	b.n	8000df2 <run_project+0x16a>
					}
				}
				else if(strcmp(buffer, "PAUSE") == 0){
 8000d5a:	463b      	mov	r3, r7
 8000d5c:	4951      	ldr	r1, [pc, #324]	; (8000ea4 <run_project+0x21c>)
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f7ff fa36 	bl	80001d0 <strcmp>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d103      	bne.n	8000d72 <run_project+0xea>
					blink = 1;
 8000d6a:	4b47      	ldr	r3, [pc, #284]	; (8000e88 <run_project+0x200>)
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	701a      	strb	r2, [r3, #0]
 8000d70:	e03f      	b.n	8000df2 <run_project+0x16a>
				}
				else if(strcmp(buffer, "NEXT") == 0){
 8000d72:	463b      	mov	r3, r7
 8000d74:	494c      	ldr	r1, [pc, #304]	; (8000ea8 <run_project+0x220>)
 8000d76:	4618      	mov	r0, r3
 8000d78:	f7ff fa2a 	bl	80001d0 <strcmp>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d126      	bne.n	8000dd0 <run_project+0x148>
					a_song = songs[player].p_song;
 8000d82:	4b4a      	ldr	r3, [pc, #296]	; (8000eac <run_project+0x224>)
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	461a      	mov	r2, r3
 8000d88:	4b49      	ldr	r3, [pc, #292]	; (8000eb0 <run_project+0x228>)
 8000d8a:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8000d8e:	4a3c      	ldr	r2, [pc, #240]	; (8000e80 <run_project+0x1f8>)
 8000d90:	6013      	str	r3, [r2, #0]
					size = songs[player].size;
 8000d92:	4b46      	ldr	r3, [pc, #280]	; (8000eac <run_project+0x224>)
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	4a46      	ldr	r2, [pc, #280]	; (8000eb0 <run_project+0x228>)
 8000d98:	00db      	lsls	r3, r3, #3
 8000d9a:	4413      	add	r3, r2
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	4a39      	ldr	r2, [pc, #228]	; (8000e84 <run_project+0x1fc>)
 8000da0:	6013      	str	r3, [r2, #0]
					parse_meta(a_song, size);
 8000da2:	4b37      	ldr	r3, [pc, #220]	; (8000e80 <run_project+0x1f8>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4a37      	ldr	r2, [pc, #220]	; (8000e84 <run_project+0x1fc>)
 8000da8:	6812      	ldr	r2, [r2, #0]
 8000daa:	4611      	mov	r1, r2
 8000dac:	4618      	mov	r0, r3
 8000dae:	f000 fc65 	bl	800167c <parse_meta>
					if(player == 5){
 8000db2:	4b3e      	ldr	r3, [pc, #248]	; (8000eac <run_project+0x224>)
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	2b05      	cmp	r3, #5
 8000db8:	d103      	bne.n	8000dc2 <run_project+0x13a>
						player = 0;
 8000dba:	4b3c      	ldr	r3, [pc, #240]	; (8000eac <run_project+0x224>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	701a      	strb	r2, [r3, #0]
 8000dc0:	e017      	b.n	8000df2 <run_project+0x16a>
					}
					else{
						player++;
 8000dc2:	4b3a      	ldr	r3, [pc, #232]	; (8000eac <run_project+0x224>)
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	3301      	adds	r3, #1
 8000dc8:	b2da      	uxtb	r2, r3
 8000dca:	4b38      	ldr	r3, [pc, #224]	; (8000eac <run_project+0x224>)
 8000dcc:	701a      	strb	r2, [r3, #0]
 8000dce:	e010      	b.n	8000df2 <run_project+0x16a>
					}
				}
				else if(strcmp(buffer, "STOP") == 0){
 8000dd0:	463b      	mov	r3, r7
 8000dd2:	4938      	ldr	r1, [pc, #224]	; (8000eb4 <run_project+0x22c>)
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff f9fb 	bl	80001d0 <strcmp>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d105      	bne.n	8000dec <run_project+0x164>
					blink = 0;
 8000de0:	4b29      	ldr	r3, [pc, #164]	; (8000e88 <run_project+0x200>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	701a      	strb	r2, [r3, #0]
					LED_Off();
 8000de6:	f7ff fb87 	bl	80004f8 <LED_Off>
 8000dea:	e002      	b.n	8000df2 <run_project+0x16a>
				}
				else{
					prints("Invalid Command\r\n");
 8000dec:	4832      	ldr	r0, [pc, #200]	; (8000eb8 <run_project+0x230>)
 8000dee:	f000 fcf1 	bl	80017d4 <prints>
				}
				memset(buffer, 0, sizeof(buffer));
 8000df2:	463b      	mov	r3, r7
 8000df4:	2206      	movs	r2, #6
 8000df6:	2100      	movs	r1, #0
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f001 fa95 	bl	8002328 <memset>
 8000dfe:	e756      	b.n	8000cae <run_project+0x26>
				}
			else if(letter == 127){
 8000e00:	79fb      	ldrb	r3, [r7, #7]
 8000e02:	2b7f      	cmp	r3, #127	; 0x7f
 8000e04:	d117      	bne.n	8000e36 <run_project+0x1ae>
				if(indexer > 0){
 8000e06:	4b23      	ldr	r3, [pc, #140]	; (8000e94 <run_project+0x20c>)
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	f43f af4f 	beq.w	8000cae <run_project+0x26>
					indexer--;
 8000e10:	4b20      	ldr	r3, [pc, #128]	; (8000e94 <run_project+0x20c>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	3b01      	subs	r3, #1
 8000e16:	b2da      	uxtb	r2, r3
 8000e18:	4b1e      	ldr	r3, [pc, #120]	; (8000e94 <run_project+0x20c>)
 8000e1a:	701a      	strb	r2, [r3, #0]
					buffer[indexer] = 0;
 8000e1c:	4b1d      	ldr	r3, [pc, #116]	; (8000e94 <run_project+0x20c>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	3308      	adds	r3, #8
 8000e22:	443b      	add	r3, r7
 8000e24:	2200      	movs	r2, #0
 8000e26:	f803 2c08 	strb.w	r2, [r3, #-8]
					prints("%c", letter);
 8000e2a:	79fb      	ldrb	r3, [r7, #7]
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4823      	ldr	r0, [pc, #140]	; (8000ebc <run_project+0x234>)
 8000e30:	f000 fcd0 	bl	80017d4 <prints>
 8000e34:	e73b      	b.n	8000cae <run_project+0x26>
				}
			}
			else if((indexer < 5) && (letter != 0)){
 8000e36:	4b17      	ldr	r3, [pc, #92]	; (8000e94 <run_project+0x20c>)
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	2b04      	cmp	r3, #4
 8000e3c:	f63f af37 	bhi.w	8000cae <run_project+0x26>
 8000e40:	79fb      	ldrb	r3, [r7, #7]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	f43f af33 	beq.w	8000cae <run_project+0x26>
				buffer[indexer] = letter;
 8000e48:	4b12      	ldr	r3, [pc, #72]	; (8000e94 <run_project+0x20c>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	3308      	adds	r3, #8
 8000e4e:	443b      	add	r3, r7
 8000e50:	79fa      	ldrb	r2, [r7, #7]
 8000e52:	f803 2c08 	strb.w	r2, [r3, #-8]
				prints("%c", letter);
 8000e56:	79fb      	ldrb	r3, [r7, #7]
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4818      	ldr	r0, [pc, #96]	; (8000ebc <run_project+0x234>)
 8000e5c:	f000 fcba 	bl	80017d4 <prints>
				indexer++;
 8000e60:	4b0c      	ldr	r3, [pc, #48]	; (8000e94 <run_project+0x20c>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	3301      	adds	r3, #1
 8000e66:	b2da      	uxtb	r2, r3
 8000e68:	4b0a      	ldr	r3, [pc, #40]	; (8000e94 <run_project+0x20c>)
 8000e6a:	701a      	strb	r2, [r3, #0]
		letter = USART_Read_nonblocking( USART2 );
 8000e6c:	e71f      	b.n	8000cae <run_project+0x26>
 8000e6e:	bf00      	nop
 8000e70:	20011756 	.word	0x20011756
 8000e74:	08002c2c 	.word	0x08002c2c
 8000e78:	40004400 	.word	0x40004400
 8000e7c:	2001176c 	.word	0x2001176c
 8000e80:	20011764 	.word	0x20011764
 8000e84:	20011768 	.word	0x20011768
 8000e88:	20011758 	.word	0x20011758
 8000e8c:	20011755 	.word	0x20011755
 8000e90:	200114a8 	.word	0x200114a8
 8000e94:	2001174c 	.word	0x2001174c
 8000e98:	08002c4c 	.word	0x08002c4c
 8000e9c:	08002c50 	.word	0x08002c50
 8000ea0:	08002c58 	.word	0x08002c58
 8000ea4:	08002c60 	.word	0x08002c60
 8000ea8:	08002c68 	.word	0x08002c68
 8000eac:	20011754 	.word	0x20011754
 8000eb0:	20011478 	.word	0x20011478
 8000eb4:	08002c70 	.word	0x08002c70
 8000eb8:	08002c78 	.word	0x08002c78
 8000ebc:	08002c8c 	.word	0x08002c8c

08000ec0 <Error_Handler>:
			}
		}
	}
}

void Error_Handler(){
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
	//do nothing
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr

08000ece <run_demo>:

void run_demo(){
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	af00      	add	r7, sp, #0

	init_systick();
 8000ed2:	f7ff fe13 	bl	8000afc <init_systick>
	DAC_Init ();
 8000ed6:	f7ff fdc5 	bl	8000a64 <DAC_Init>
	DAC_Start ();
 8000eda:	f7ff fdf5 	bl	8000ac8 <DAC_Start>
	run_project();
 8000ede:	f7ff fed3 	bl	8000c88 <run_project>
}
 8000ee2:	bf00      	nop
 8000ee4:	bd80      	pop	{r7, pc}
	...

08000ee8 <EXTI15_10_IRQHandler>:
int presses = 0;
int play = 1;
int local = 0;


void EXTI15_10_IRQHandler(){
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
	GPIO_PinState state = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 8000eee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ef2:	481f      	ldr	r0, [pc, #124]	; (8000f70 <EXTI15_10_IRQHandler+0x88>)
 8000ef4:	f001 f998 	bl	8002228 <HAL_GPIO_ReadPin>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_TogglePin(B1_GPIO_Port, B1_Pin);
 8000efc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f00:	481b      	ldr	r0, [pc, #108]	; (8000f70 <EXTI15_10_IRQHandler+0x88>)
 8000f02:	f001 f9a9 	bl	8002258 <HAL_GPIO_TogglePin>
	while(state != switched){
 8000f06:	e006      	b.n	8000f16 <EXTI15_10_IRQHandler+0x2e>
		state = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 8000f08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f0c:	4818      	ldr	r0, [pc, #96]	; (8000f70 <EXTI15_10_IRQHandler+0x88>)
 8000f0e:	f001 f98b 	bl	8002228 <HAL_GPIO_ReadPin>
 8000f12:	4603      	mov	r3, r0
 8000f14:	71fb      	strb	r3, [r7, #7]
	while(state != switched){
 8000f16:	79fa      	ldrb	r2, [r7, #7]
 8000f18:	4b16      	ldr	r3, [pc, #88]	; (8000f74 <EXTI15_10_IRQHandler+0x8c>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	d1f3      	bne.n	8000f08 <EXTI15_10_IRQHandler+0x20>
	}
	if(state == 1){
 8000f20:	79fb      	ldrb	r3, [r7, #7]
 8000f22:	2b01      	cmp	r3, #1
 8000f24:	d10a      	bne.n	8000f3c <EXTI15_10_IRQHandler+0x54>
		switched = 0;
 8000f26:	4b13      	ldr	r3, [pc, #76]	; (8000f74 <EXTI15_10_IRQHandler+0x8c>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
		remote_off();
 8000f2c:	f7ff fe72 	bl	8000c14 <remote_off>
		local = 1;
 8000f30:	4b11      	ldr	r3, [pc, #68]	; (8000f78 <EXTI15_10_IRQHandler+0x90>)
 8000f32:	2201      	movs	r2, #1
 8000f34:	601a      	str	r2, [r3, #0]
		prints("\n\r***MANUAL OVERRIDE MODE ACTIVE***\n\r");
 8000f36:	4811      	ldr	r0, [pc, #68]	; (8000f7c <EXTI15_10_IRQHandler+0x94>)
 8000f38:	f000 fc4c 	bl	80017d4 <prints>
	}
	if(state == 0){
 8000f3c:	79fb      	ldrb	r3, [r7, #7]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d10e      	bne.n	8000f60 <EXTI15_10_IRQHandler+0x78>
		switched = 1;
 8000f42:	4b0c      	ldr	r3, [pc, #48]	; (8000f74 <EXTI15_10_IRQHandler+0x8c>)
 8000f44:	2201      	movs	r2, #1
 8000f46:	601a      	str	r2, [r3, #0]
		remote_on();
 8000f48:	f7ff fe58 	bl	8000bfc <remote_on>
		local = 0;
 8000f4c:	4b0a      	ldr	r3, [pc, #40]	; (8000f78 <EXTI15_10_IRQHandler+0x90>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	601a      	str	r2, [r3, #0]
		LED_Off();
 8000f52:	f7ff fad1 	bl	80004f8 <LED_Off>
		unpause();
 8000f56:	f7ff fe03 	bl	8000b60 <unpause>
		prints("\n\r***REMOTE MODE ACTIVE***\n\r");
 8000f5a:	4809      	ldr	r0, [pc, #36]	; (8000f80 <EXTI15_10_IRQHandler+0x98>)
 8000f5c:	f000 fc3a 	bl	80017d4 <prints>
	}
	HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000f60:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000f64:	f001 f992 	bl	800228c <HAL_GPIO_EXTI_IRQHandler>
}
 8000f68:	bf00      	nop
 8000f6a:	3708      	adds	r7, #8
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	48000800 	.word	0x48000800
 8000f74:	200114ac 	.word	0x200114ac
 8000f78:	20011774 	.word	0x20011774
 8000f7c:	08002c90 	.word	0x08002c90
 8000f80:	08002cb8 	.word	0x08002cb8

08000f84 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(){
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
	if(local == 1){
 8000f8a:	4b52      	ldr	r3, [pc, #328]	; (80010d4 <EXTI9_5_IRQHandler+0x150>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	f040 8097 	bne.w	80010c2 <EXTI9_5_IRQHandler+0x13e>
		GPIO_PinState state = HAL_GPIO_ReadPin(S1_GPIO_Port, S1_Pin);
 8000f94:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f9c:	f001 f944 	bl	8002228 <HAL_GPIO_ReadPin>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	71fb      	strb	r3, [r7, #7]
		if(state == 1){
 8000fa4:	79fb      	ldrb	r3, [r7, #7]
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d118      	bne.n	8000fdc <EXTI9_5_IRQHandler+0x58>
			if(presses == 0){
 8000faa:	4b4b      	ldr	r3, [pc, #300]	; (80010d8 <EXTI9_5_IRQHandler+0x154>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d105      	bne.n	8000fbe <EXTI9_5_IRQHandler+0x3a>
				one_second = 0;
 8000fb2:	4b4a      	ldr	r3, [pc, #296]	; (80010dc <EXTI9_5_IRQHandler+0x158>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	701a      	strb	r2, [r3, #0]
				counter = 0;
 8000fb8:	4b49      	ldr	r3, [pc, #292]	; (80010e0 <EXTI9_5_IRQHandler+0x15c>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	601a      	str	r2, [r3, #0]
			}
			presses++;
 8000fbe:	4b46      	ldr	r3, [pc, #280]	; (80010d8 <EXTI9_5_IRQHandler+0x154>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	4a44      	ldr	r2, [pc, #272]	; (80010d8 <EXTI9_5_IRQHandler+0x154>)
 8000fc6:	6013      	str	r3, [r2, #0]
			stopper = 0;
 8000fc8:	4b46      	ldr	r3, [pc, #280]	; (80010e4 <EXTI9_5_IRQHandler+0x160>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	701a      	strb	r2, [r3, #0]
			second_counter = 0;
 8000fce:	4b46      	ldr	r3, [pc, #280]	; (80010e8 <EXTI9_5_IRQHandler+0x164>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
			HAL_GPIO_EXTI_IRQHandler(S1_Pin);
 8000fd4:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000fd8:	f001 f958 	bl	800228c <HAL_GPIO_EXTI_IRQHandler>
		}
		if(state == 0){
 8000fdc:	79fb      	ldrb	r3, [r7, #7]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d16f      	bne.n	80010c2 <EXTI9_5_IRQHandler+0x13e>
			if(presses >= 2 && one_second == 0){
 8000fe2:	4b3d      	ldr	r3, [pc, #244]	; (80010d8 <EXTI9_5_IRQHandler+0x154>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	2b01      	cmp	r3, #1
 8000fe8:	dd2e      	ble.n	8001048 <EXTI9_5_IRQHandler+0xc4>
 8000fea:	4b3c      	ldr	r3, [pc, #240]	; (80010dc <EXTI9_5_IRQHandler+0x158>)
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d129      	bne.n	8001048 <EXTI9_5_IRQHandler+0xc4>
				presses = 0;
 8000ff4:	4b38      	ldr	r3, [pc, #224]	; (80010d8 <EXTI9_5_IRQHandler+0x154>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	601a      	str	r2, [r3, #0]
				a_song = local_song(player);
 8000ffa:	4b3c      	ldr	r3, [pc, #240]	; (80010ec <EXTI9_5_IRQHandler+0x168>)
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff fe14 	bl	8000c2c <local_song>
 8001004:	4603      	mov	r3, r0
 8001006:	4a3a      	ldr	r2, [pc, #232]	; (80010f0 <EXTI9_5_IRQHandler+0x16c>)
 8001008:	6013      	str	r3, [r2, #0]
				size = local_song_size(player);
 800100a:	4b38      	ldr	r3, [pc, #224]	; (80010ec <EXTI9_5_IRQHandler+0x168>)
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	4618      	mov	r0, r3
 8001010:	f7ff fe1c 	bl	8000c4c <local_song_size>
 8001014:	4603      	mov	r3, r0
 8001016:	4a37      	ldr	r2, [pc, #220]	; (80010f4 <EXTI9_5_IRQHandler+0x170>)
 8001018:	6013      	str	r3, [r2, #0]
				parse_meta(a_song, size);
 800101a:	4b35      	ldr	r3, [pc, #212]	; (80010f0 <EXTI9_5_IRQHandler+0x16c>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a35      	ldr	r2, [pc, #212]	; (80010f4 <EXTI9_5_IRQHandler+0x170>)
 8001020:	6812      	ldr	r2, [r2, #0]
 8001022:	4611      	mov	r1, r2
 8001024:	4618      	mov	r0, r3
 8001026:	f000 fb29 	bl	800167c <parse_meta>
				if(player == 5){
 800102a:	4b30      	ldr	r3, [pc, #192]	; (80010ec <EXTI9_5_IRQHandler+0x168>)
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	2b05      	cmp	r3, #5
 8001030:	d103      	bne.n	800103a <EXTI9_5_IRQHandler+0xb6>
					player = 0;
 8001032:	4b2e      	ldr	r3, [pc, #184]	; (80010ec <EXTI9_5_IRQHandler+0x168>)
 8001034:	2200      	movs	r2, #0
 8001036:	701a      	strb	r2, [r3, #0]
				if(player == 5){
 8001038:	e03f      	b.n	80010ba <EXTI9_5_IRQHandler+0x136>
				}
				else{
					player++;
 800103a:	4b2c      	ldr	r3, [pc, #176]	; (80010ec <EXTI9_5_IRQHandler+0x168>)
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	3301      	adds	r3, #1
 8001040:	b2da      	uxtb	r2, r3
 8001042:	4b2a      	ldr	r3, [pc, #168]	; (80010ec <EXTI9_5_IRQHandler+0x168>)
 8001044:	701a      	strb	r2, [r3, #0]
				if(player == 5){
 8001046:	e038      	b.n	80010ba <EXTI9_5_IRQHandler+0x136>
				}
			}
			else if(stopper == 1){
 8001048:	4b26      	ldr	r3, [pc, #152]	; (80010e4 <EXTI9_5_IRQHandler+0x160>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	b2db      	uxtb	r3, r3
 800104e:	2b01      	cmp	r3, #1
 8001050:	d113      	bne.n	800107a <EXTI9_5_IRQHandler+0xf6>
				LED_Off();
 8001052:	f7ff fa51 	bl	80004f8 <LED_Off>
				unpause();
 8001056:	f7ff fd83 	bl	8000b60 <unpause>
				play = 1;
 800105a:	4b27      	ldr	r3, [pc, #156]	; (80010f8 <EXTI9_5_IRQHandler+0x174>)
 800105c:	2201      	movs	r2, #1
 800105e:	601a      	str	r2, [r3, #0]
				presses = 0;
 8001060:	4b1d      	ldr	r3, [pc, #116]	; (80010d8 <EXTI9_5_IRQHandler+0x154>)
 8001062:	2200      	movs	r2, #0
 8001064:	601a      	str	r2, [r3, #0]
				one_second = 0;
 8001066:	4b1d      	ldr	r3, [pc, #116]	; (80010dc <EXTI9_5_IRQHandler+0x158>)
 8001068:	2200      	movs	r2, #0
 800106a:	701a      	strb	r2, [r3, #0]
				second_counter = 0;
 800106c:	4b1e      	ldr	r3, [pc, #120]	; (80010e8 <EXTI9_5_IRQHandler+0x164>)
 800106e:	2200      	movs	r2, #0
 8001070:	601a      	str	r2, [r3, #0]
				counter = 0;
 8001072:	4b1b      	ldr	r3, [pc, #108]	; (80010e0 <EXTI9_5_IRQHandler+0x15c>)
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	e01f      	b.n	80010ba <EXTI9_5_IRQHandler+0x136>
			}
			else{
				LED_On();
 800107a:	f7ff fa1e 	bl	80004ba <LED_On>
				if(one_second == 1){
 800107e:	4b17      	ldr	r3, [pc, #92]	; (80010dc <EXTI9_5_IRQHandler+0x158>)
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	b2db      	uxtb	r3, r3
 8001084:	2b01      	cmp	r3, #1
 8001086:	d105      	bne.n	8001094 <EXTI9_5_IRQHandler+0x110>
					one_second = 0;
 8001088:	4b14      	ldr	r3, [pc, #80]	; (80010dc <EXTI9_5_IRQHandler+0x158>)
 800108a:	2200      	movs	r2, #0
 800108c:	701a      	strb	r2, [r3, #0]
					presses = 0;
 800108e:	4b12      	ldr	r3, [pc, #72]	; (80010d8 <EXTI9_5_IRQHandler+0x154>)
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
				}
				if(play == 1){
 8001094:	4b18      	ldr	r3, [pc, #96]	; (80010f8 <EXTI9_5_IRQHandler+0x174>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2b01      	cmp	r3, #1
 800109a:	d109      	bne.n	80010b0 <EXTI9_5_IRQHandler+0x12c>
					unpause();
 800109c:	f7ff fd60 	bl	8000b60 <unpause>
					LED_On();
 80010a0:	f7ff fa0b 	bl	80004ba <LED_On>
					play = 0;
 80010a4:	4b14      	ldr	r3, [pc, #80]	; (80010f8 <EXTI9_5_IRQHandler+0x174>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	601a      	str	r2, [r3, #0]
					local_play_song();
 80010aa:	f7ff fde1 	bl	8000c70 <local_play_song>
 80010ae:	e004      	b.n	80010ba <EXTI9_5_IRQHandler+0x136>
				}
				else{
					pause();
 80010b0:	f7ff fd4a 	bl	8000b48 <pause>
					play = 1;
 80010b4:	4b10      	ldr	r3, [pc, #64]	; (80010f8 <EXTI9_5_IRQHandler+0x174>)
 80010b6:	2201      	movs	r2, #1
 80010b8:	601a      	str	r2, [r3, #0]
				}
			}
			HAL_GPIO_EXTI_IRQHandler(S1_Pin);
 80010ba:	f44f 7000 	mov.w	r0, #512	; 0x200
 80010be:	f001 f8e5 	bl	800228c <HAL_GPIO_EXTI_IRQHandler>
		}
	}
	HAL_GPIO_EXTI_IRQHandler(S1_Pin);
 80010c2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80010c6:	f001 f8e1 	bl	800228c <HAL_GPIO_EXTI_IRQHandler>
}
 80010ca:	bf00      	nop
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	20011774 	.word	0x20011774
 80010d8:	20011770 	.word	0x20011770
 80010dc:	20011756 	.word	0x20011756
 80010e0:	20011750 	.word	0x20011750
 80010e4:	20011757 	.word	0x20011757
 80010e8:	2001175c 	.word	0x2001175c
 80010ec:	20011754 	.word	0x20011754
 80010f0:	20011764 	.word	0x20011764
 80010f4:	20011768 	.word	0x20011768
 80010f8:	200114b0 	.word	0x200114b0

080010fc <help_me>:


#include "help.h"
#include "print.h"

void help_me(){
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
	prints("***REMOTE LED CONTROL MENU***\r\n");
 8001100:	4809      	ldr	r0, [pc, #36]	; (8001128 <help_me+0x2c>)
 8001102:	f000 fb67 	bl	80017d4 <prints>
	prints("Available User Commands\r\n");
 8001106:	4809      	ldr	r0, [pc, #36]	; (800112c <help_me+0x30>)
 8001108:	f000 fb64 	bl	80017d4 <prints>
	prints("NEXT - Show next song info\r\n");
 800110c:	4808      	ldr	r0, [pc, #32]	; (8001130 <help_me+0x34>)
 800110e:	f000 fb61 	bl	80017d4 <prints>
	prints("PLAY - Play the song (LED on)\r\n");
 8001112:	4808      	ldr	r0, [pc, #32]	; (8001134 <help_me+0x38>)
 8001114:	f000 fb5e 	bl	80017d4 <prints>
	prints("PAUSE - Pause the song (LED flash)\r\n");
 8001118:	4807      	ldr	r0, [pc, #28]	; (8001138 <help_me+0x3c>)
 800111a:	f000 fb5b 	bl	80017d4 <prints>
	prints("STOP - Stop the song (LED off)\r\n");
 800111e:	4807      	ldr	r0, [pc, #28]	; (800113c <help_me+0x40>)
 8001120:	f000 fb58 	bl	80017d4 <prints>
}
 8001124:	bf00      	nop
 8001126:	bd80      	pop	{r7, pc}
 8001128:	08002cd8 	.word	0x08002cd8
 800112c:	08002cf8 	.word	0x08002cf8
 8001130:	08002d14 	.word	0x08002d14
 8001134:	08002d34 	.word	0x08002d34
 8001138:	08002d54 	.word	0x08002d54
 800113c:	08002d7c 	.word	0x08002d7c

08001140 <convert_to_uint16>:


#include "little_endian.h"
#include "stdint.h"

uint16_t convert_to_uint16(unsigned char* p_value){
 8001140:	b480      	push	{r7}
 8001142:	b085      	sub	sp, #20
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
	uint8_t first = p_value[0];
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	73fb      	strb	r3, [r7, #15]
	uint8_t second = p_value[1];
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	785b      	ldrb	r3, [r3, #1]
 8001152:	73bb      	strb	r3, [r7, #14]
	return (first << 8) + second;
 8001154:	7bfb      	ldrb	r3, [r7, #15]
 8001156:	b29b      	uxth	r3, r3
 8001158:	021b      	lsls	r3, r3, #8
 800115a:	b29a      	uxth	r2, r3
 800115c:	7bbb      	ldrb	r3, [r7, #14]
 800115e:	b29b      	uxth	r3, r3
 8001160:	4413      	add	r3, r2
 8001162:	b29b      	uxth	r3, r3
}
 8001164:	4618      	mov	r0, r3
 8001166:	3714      	adds	r7, #20
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr

08001170 <convert_to_uint24>:

uint32_t convert_to_uint24(unsigned char* ptr){
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
	return (uint32_t)((ptr[0] << 16) + (ptr[1] << 8) + ptr[2]);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	041a      	lsls	r2, r3, #16
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	3301      	adds	r3, #1
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	021b      	lsls	r3, r3, #8
 8001186:	4413      	add	r3, r2
 8001188:	687a      	ldr	r2, [r7, #4]
 800118a:	3202      	adds	r2, #2
 800118c:	7812      	ldrb	r2, [r2, #0]
 800118e:	4413      	add	r3, r2
}
 8001190:	4618      	mov	r0, r3
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr

0800119c <convert_to_uint32>:

uint32_t convert_to_uint32(unsigned char* p_value){
 800119c:	b480      	push	{r7}
 800119e:	b085      	sub	sp, #20
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
	uint8_t first = p_value[0];
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	73fb      	strb	r3, [r7, #15]
	uint8_t second = p_value[1];
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	785b      	ldrb	r3, [r3, #1]
 80011ae:	73bb      	strb	r3, [r7, #14]
	uint8_t third = p_value[2];
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	789b      	ldrb	r3, [r3, #2]
 80011b4:	737b      	strb	r3, [r7, #13]
	uint8_t fourth = p_value[3];
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	78db      	ldrb	r3, [r3, #3]
 80011ba:	733b      	strb	r3, [r7, #12]
	return (first << 24) + (second >> 16) + (third >> 8) + fourth;
 80011bc:	7bfb      	ldrb	r3, [r7, #15]
 80011be:	061a      	lsls	r2, r3, #24
 80011c0:	7bbb      	ldrb	r3, [r7, #14]
 80011c2:	141b      	asrs	r3, r3, #16
 80011c4:	441a      	add	r2, r3
 80011c6:	7b7b      	ldrb	r3, [r7, #13]
 80011c8:	121b      	asrs	r3, r3, #8
 80011ca:	441a      	add	r2, r3
 80011cc:	7b3b      	ldrb	r3, [r7, #12]
 80011ce:	4413      	add	r3, r2
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3714      	adds	r7, #20
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr

080011dc <main>:
#include "LED.h"
#include "UART.h"
#include "demo.h"

	
int main(void){
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0

	// initialization code
	System_Clock_Init(); // set System Clock = 80 MHz
 80011e0:	f7ff f9c8 	bl	8000574 <System_Clock_Init>
	LED_Init();
 80011e4:	f7ff f956 	bl	8000494 <LED_Init>
	UART2_Init();
 80011e8:	f7ff faa2 	bl	8000730 <UART2_Init>
	
	// application run function
	run_demo() ;
 80011ec:	f7ff fe6f 	bl	8000ece <run_demo>
 80011f0:	2300      	movs	r3, #0
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	bd80      	pop	{r7, pc}
	...

080011f8 <parse_meta_event>:
/*
 * This function will parse through all of the meta
 * events in a song and will grab the tempo from
 * a specific meta event
 */
uint32_t parse_meta_event(int index){
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b086      	sub	sp, #24
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
	int length = c_song[index + 2];
 8001200:	4b1e      	ldr	r3, [pc, #120]	; (800127c <parse_meta_event+0x84>)
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	3302      	adds	r3, #2
 8001208:	4413      	add	r3, r2
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	613b      	str	r3, [r7, #16]
	if(c_song[index + 1] == 0x51){
 800120e:	4b1b      	ldr	r3, [pc, #108]	; (800127c <parse_meta_event+0x84>)
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	3301      	adds	r3, #1
 8001216:	4413      	add	r3, r2
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	2b51      	cmp	r3, #81	; 0x51
 800121c:	d123      	bne.n	8001266 <parse_meta_event+0x6e>
		index += 3;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	3303      	adds	r3, #3
 8001222:	607b      	str	r3, [r7, #4]
		unsigned char t[3];
		for(int i = 0; i < length; i++){
 8001224:	2300      	movs	r3, #0
 8001226:	617b      	str	r3, [r7, #20]
 8001228:	e010      	b.n	800124c <parse_meta_event+0x54>
			t[i] = c_song[index];
 800122a:	4b14      	ldr	r3, [pc, #80]	; (800127c <parse_meta_event+0x84>)
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4413      	add	r3, r2
 8001232:	7819      	ldrb	r1, [r3, #0]
 8001234:	f107 020c 	add.w	r2, r7, #12
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	4413      	add	r3, r2
 800123c:	460a      	mov	r2, r1
 800123e:	701a      	strb	r2, [r3, #0]
			index++;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	3301      	adds	r3, #1
 8001244:	607b      	str	r3, [r7, #4]
		for(int i = 0; i < length; i++){
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	3301      	adds	r3, #1
 800124a:	617b      	str	r3, [r7, #20]
 800124c:	697a      	ldr	r2, [r7, #20]
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	429a      	cmp	r2, r3
 8001252:	dbea      	blt.n	800122a <parse_meta_event+0x32>
		}
		tempo = convert_to_uint24(t);
 8001254:	f107 030c 	add.w	r3, r7, #12
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff ff89 	bl	8001170 <convert_to_uint24>
 800125e:	4603      	mov	r3, r0
 8001260:	4a07      	ldr	r2, [pc, #28]	; (8001280 <parse_meta_event+0x88>)
 8001262:	6013      	str	r3, [r2, #0]
 8001264:	e004      	b.n	8001270 <parse_meta_event+0x78>
	}
	else{
		index += length + 3;
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	3303      	adds	r3, #3
 800126a:	687a      	ldr	r2, [r7, #4]
 800126c:	4413      	add	r3, r2
 800126e:	607b      	str	r3, [r7, #4]
	}
	return index;
 8001270:	687b      	ldr	r3, [r7, #4]
}
 8001272:	4618      	mov	r0, r3
 8001274:	3718      	adds	r7, #24
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	2001177c 	.word	0x2001177c
 8001280:	20011780 	.word	0x20011780

08001284 <parse_midi_event>:
/*
 * This function will parse through on or off events for the midi
 * mtrk events where it will calculate the variable length delay
 * and grab the note and velocity from each of these events
 */
uint32_t parse_midi_event(int index, uint8_t on_or_off){
 8001284:	b580      	push	{r7, lr}
 8001286:	b086      	sub	sp, #24
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	460b      	mov	r3, r1
 800128e:	70fb      	strb	r3, [r7, #3]
	uint32_t delay = 0;
 8001290:	2300      	movs	r3, #0
 8001292:	617b      	str	r3, [r7, #20]
	if(on_or_off == 1){
 8001294:	78fb      	ldrb	r3, [r7, #3]
 8001296:	2b01      	cmp	r3, #1
 8001298:	d165      	bne.n	8001366 <parse_midi_event+0xe2>
		uint32_t check = (c_song[index] & 0xFF) >> 7;
 800129a:	4b4f      	ldr	r3, [pc, #316]	; (80013d8 <parse_midi_event+0x154>)
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4413      	add	r3, r2
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	09db      	lsrs	r3, r3, #7
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	613b      	str	r3, [r7, #16]
		if(check == 1){
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	d127      	bne.n	8001300 <parse_midi_event+0x7c>
			delay += (c_song[index] & 0x0F)<<7;
 80012b0:	4b49      	ldr	r3, [pc, #292]	; (80013d8 <parse_midi_event+0x154>)
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	4413      	add	r3, r2
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	01db      	lsls	r3, r3, #7
 80012bc:	f403 63f0 	and.w	r3, r3, #1920	; 0x780
 80012c0:	697a      	ldr	r2, [r7, #20]
 80012c2:	4413      	add	r3, r2
 80012c4:	617b      	str	r3, [r7, #20]
			while(check == 1){
 80012c6:	e018      	b.n	80012fa <parse_midi_event+0x76>
				index++;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	3301      	adds	r3, #1
 80012cc:	607b      	str	r3, [r7, #4]
				check = (c_song[index] & 0xFF) >> 7;
 80012ce:	4b42      	ldr	r3, [pc, #264]	; (80013d8 <parse_midi_event+0x154>)
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4413      	add	r3, r2
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	09db      	lsrs	r3, r3, #7
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	613b      	str	r3, [r7, #16]
				if(check == 1){
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d10a      	bne.n	80012fa <parse_midi_event+0x76>
					delay += (c_song[index] & 0x0F)<<7;
 80012e4:	4b3c      	ldr	r3, [pc, #240]	; (80013d8 <parse_midi_event+0x154>)
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	4413      	add	r3, r2
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	01db      	lsls	r3, r3, #7
 80012f0:	f403 63f0 	and.w	r3, r3, #1920	; 0x780
 80012f4:	697a      	ldr	r2, [r7, #20]
 80012f6:	4413      	add	r3, r2
 80012f8:	617b      	str	r3, [r7, #20]
			while(check == 1){
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d0e3      	beq.n	80012c8 <parse_midi_event+0x44>
				}
			}
		}
		delay += c_song[index];
 8001300:	4b35      	ldr	r3, [pc, #212]	; (80013d8 <parse_midi_event+0x154>)
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	4413      	add	r3, r2
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	461a      	mov	r2, r3
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	4413      	add	r3, r2
 8001310:	617b      	str	r3, [r7, #20]
		index++;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	3301      	adds	r3, #1
 8001316:	607b      	str	r3, [r7, #4]
		prints("delay: %d\r\n", delay);
 8001318:	6979      	ldr	r1, [r7, #20]
 800131a:	4830      	ldr	r0, [pc, #192]	; (80013dc <parse_midi_event+0x158>)
 800131c:	f000 fa5a 	bl	80017d4 <prints>
		current_note.delay = delay;
 8001320:	4a2f      	ldr	r2, [pc, #188]	; (80013e0 <parse_midi_event+0x15c>)
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	6013      	str	r3, [r2, #0]
		uint8_t c_note = c_song[index];
 8001326:	4b2c      	ldr	r3, [pc, #176]	; (80013d8 <parse_midi_event+0x154>)
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4413      	add	r3, r2
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	73bb      	strb	r3, [r7, #14]
		current_note.note = c_note;
 8001332:	4a2b      	ldr	r2, [pc, #172]	; (80013e0 <parse_midi_event+0x15c>)
 8001334:	7bbb      	ldrb	r3, [r7, #14]
 8001336:	7113      	strb	r3, [r2, #4]
		current_note.velocity = 0;
 8001338:	4b29      	ldr	r3, [pc, #164]	; (80013e0 <parse_midi_event+0x15c>)
 800133a:	2200      	movs	r2, #0
 800133c:	715a      	strb	r2, [r3, #5]
		notes[note_incre] = current_note;
 800133e:	4b29      	ldr	r3, [pc, #164]	; (80013e4 <parse_midi_event+0x160>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a29      	ldr	r2, [pc, #164]	; (80013e8 <parse_midi_event+0x164>)
 8001344:	4926      	ldr	r1, [pc, #152]	; (80013e0 <parse_midi_event+0x15c>)
 8001346:	00db      	lsls	r3, r3, #3
 8001348:	4413      	add	r3, r2
 800134a:	460a      	mov	r2, r1
 800134c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001350:	e883 0003 	stmia.w	r3, {r0, r1}
		note_incre++;
 8001354:	4b23      	ldr	r3, [pc, #140]	; (80013e4 <parse_midi_event+0x160>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	3301      	adds	r3, #1
 800135a:	4a22      	ldr	r2, [pc, #136]	; (80013e4 <parse_midi_event+0x160>)
 800135c:	6013      	str	r3, [r2, #0]
		index++;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	3301      	adds	r3, #1
 8001362:	607b      	str	r3, [r7, #4]
 8001364:	e033      	b.n	80013ce <parse_midi_event+0x14a>
	}
	else{
		delay = c_song[index - 1];
 8001366:	4b1c      	ldr	r3, [pc, #112]	; (80013d8 <parse_midi_event+0x154>)
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	3b01      	subs	r3, #1
 800136e:	4413      	add	r3, r2
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	617b      	str	r3, [r7, #20]
		index ++;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	3301      	adds	r3, #1
 8001378:	607b      	str	r3, [r7, #4]
		prints("delay: %d\r\n", delay);
 800137a:	6979      	ldr	r1, [r7, #20]
 800137c:	4817      	ldr	r0, [pc, #92]	; (80013dc <parse_midi_event+0x158>)
 800137e:	f000 fa29 	bl	80017d4 <prints>
		uint8_t c_note = c_song[index];
 8001382:	4b15      	ldr	r3, [pc, #84]	; (80013d8 <parse_midi_event+0x154>)
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4413      	add	r3, r2
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	73fb      	strb	r3, [r7, #15]
		index ++;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	3301      	adds	r3, #1
 8001392:	607b      	str	r3, [r7, #4]
		current_note.delay = delay;
 8001394:	4a12      	ldr	r2, [pc, #72]	; (80013e0 <parse_midi_event+0x15c>)
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	6013      	str	r3, [r2, #0]
		current_note.note = c_note;
 800139a:	4a11      	ldr	r2, [pc, #68]	; (80013e0 <parse_midi_event+0x15c>)
 800139c:	7bfb      	ldrb	r3, [r7, #15]
 800139e:	7113      	strb	r3, [r2, #4]
		current_note.velocity = c_song[index];
 80013a0:	4b0d      	ldr	r3, [pc, #52]	; (80013d8 <parse_midi_event+0x154>)
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	4413      	add	r3, r2
 80013a8:	781a      	ldrb	r2, [r3, #0]
 80013aa:	4b0d      	ldr	r3, [pc, #52]	; (80013e0 <parse_midi_event+0x15c>)
 80013ac:	715a      	strb	r2, [r3, #5]
		notes[note_incre] = current_note;
 80013ae:	4b0d      	ldr	r3, [pc, #52]	; (80013e4 <parse_midi_event+0x160>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a0d      	ldr	r2, [pc, #52]	; (80013e8 <parse_midi_event+0x164>)
 80013b4:	490a      	ldr	r1, [pc, #40]	; (80013e0 <parse_midi_event+0x15c>)
 80013b6:	00db      	lsls	r3, r3, #3
 80013b8:	4413      	add	r3, r2
 80013ba:	460a      	mov	r2, r1
 80013bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013c0:	e883 0003 	stmia.w	r3, {r0, r1}
		note_incre++;
 80013c4:	4b07      	ldr	r3, [pc, #28]	; (80013e4 <parse_midi_event+0x160>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	3301      	adds	r3, #1
 80013ca:	4a06      	ldr	r2, [pc, #24]	; (80013e4 <parse_midi_event+0x160>)
 80013cc:	6013      	str	r3, [r2, #0]
	}
	return index;
 80013ce:	687b      	ldr	r3, [r7, #4]
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3718      	adds	r7, #24
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	2001177c 	.word	0x2001177c
 80013dc:	08002da0 	.word	0x08002da0
 80013e0:	20017548 	.word	0x20017548
 80013e4:	20017544 	.word	0x20017544
 80013e8:	20011784 	.word	0x20011784

080013ec <parse_header>:
/*
 * This function will get the data for the length,
 * number of tracks, the division, and the division
 * of the song to fill the pheader struct
 */
void parse_header(){
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b088      	sub	sp, #32
 80013f0:	af00      	add	r7, sp, #0
	pheader = (chunk*)c_song;
 80013f2:	4b1d      	ldr	r3, [pc, #116]	; (8001468 <parse_header+0x7c>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a1d      	ldr	r2, [pc, #116]	; (800146c <parse_header+0x80>)
 80013f8:	6013      	str	r3, [r2, #0]

	uint32_t *len = &(pheader->length);
 80013fa:	4b1c      	ldr	r3, [pc, #112]	; (800146c <parse_header+0x80>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	3304      	adds	r3, #4
 8001400:	61fb      	str	r3, [r7, #28]
	uint32_t length = convert_to_uint32((unsigned char*)len);
 8001402:	69f8      	ldr	r0, [r7, #28]
 8001404:	f7ff feca 	bl	800119c <convert_to_uint32>
 8001408:	61b8      	str	r0, [r7, #24]
	pheader->length = length;
 800140a:	4b18      	ldr	r3, [pc, #96]	; (800146c <parse_header+0x80>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	605a      	str	r2, [r3, #4]

	uint16_t *div = &(pheader->division);
 8001412:	4b16      	ldr	r3, [pc, #88]	; (800146c <parse_header+0x80>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	330c      	adds	r3, #12
 8001418:	617b      	str	r3, [r7, #20]
	uint16_t division = convert_to_uint16((unsigned char*)div);
 800141a:	6978      	ldr	r0, [r7, #20]
 800141c:	f7ff fe90 	bl	8001140 <convert_to_uint16>
 8001420:	4603      	mov	r3, r0
 8001422:	827b      	strh	r3, [r7, #18]
	pheader->division = division;
 8001424:	4b11      	ldr	r3, [pc, #68]	; (800146c <parse_header+0x80>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	8a7a      	ldrh	r2, [r7, #18]
 800142a:	819a      	strh	r2, [r3, #12]

	uint16_t *form = &(pheader->format);
 800142c:	4b0f      	ldr	r3, [pc, #60]	; (800146c <parse_header+0x80>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	3308      	adds	r3, #8
 8001432:	60fb      	str	r3, [r7, #12]
	uint16_t format = convert_to_uint16((unsigned char*)form);
 8001434:	68f8      	ldr	r0, [r7, #12]
 8001436:	f7ff fe83 	bl	8001140 <convert_to_uint16>
 800143a:	4603      	mov	r3, r0
 800143c:	817b      	strh	r3, [r7, #10]
	pheader->format = format;
 800143e:	4b0b      	ldr	r3, [pc, #44]	; (800146c <parse_header+0x80>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	897a      	ldrh	r2, [r7, #10]
 8001444:	811a      	strh	r2, [r3, #8]

	uint16_t *nt = &(pheader->ntrks);
 8001446:	4b09      	ldr	r3, [pc, #36]	; (800146c <parse_header+0x80>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	330a      	adds	r3, #10
 800144c:	607b      	str	r3, [r7, #4]
	uint16_t ntrks = convert_to_uint16((unsigned char*)nt);
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f7ff fe76 	bl	8001140 <convert_to_uint16>
 8001454:	4603      	mov	r3, r0
 8001456:	807b      	strh	r3, [r7, #2]
	pheader->ntrks = ntrks;
 8001458:	4b04      	ldr	r3, [pc, #16]	; (800146c <parse_header+0x80>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	887a      	ldrh	r2, [r7, #2]
 800145e:	815a      	strh	r2, [r3, #10]
}
 8001460:	bf00      	nop
 8001462:	3720      	adds	r7, #32
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	2001177c 	.word	0x2001177c
 800146c:	20011778 	.word	0x20011778

08001470 <parse_song>:
/*
 * This function will go through byte by byte
 * and do the necessary parsing if it is a
 * meta event or a midi event
 */
void parse_song(uint32_t size){
 8001470:	b580      	push	{r7, lr}
 8001472:	b086      	sub	sp, #24
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
	parse_header();
 8001478:	f7ff ffb8 	bl	80013ec <parse_header>
	note_incre = 0;
 800147c:	4b36      	ldr	r3, [pc, #216]	; (8001558 <parse_song+0xe8>)
 800147e:	2200      	movs	r2, #0
 8001480:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < size; i++){
 8001482:	2300      	movs	r3, #0
 8001484:	617b      	str	r3, [r7, #20]
 8001486:	e05d      	b.n	8001544 <parse_song+0xd4>
		if(c_song[i] == 0x4d){
 8001488:	4b34      	ldr	r3, [pc, #208]	; (800155c <parse_song+0xec>)
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	4413      	add	r3, r2
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	2b4d      	cmp	r3, #77	; 0x4d
 8001494:	d103      	bne.n	800149e <parse_song+0x2e>
			i += 8;
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	3308      	adds	r3, #8
 800149a:	617b      	str	r3, [r7, #20]
 800149c:	e04f      	b.n	800153e <parse_song+0xce>
		}
		else if(c_song[i] == 0xFF){
 800149e:	4b2f      	ldr	r3, [pc, #188]	; (800155c <parse_song+0xec>)
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	4413      	add	r3, r2
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	2bff      	cmp	r3, #255	; 0xff
 80014aa:	d108      	bne.n	80014be <parse_song+0x4e>
			int val = parse_meta_event(i);
 80014ac:	6978      	ldr	r0, [r7, #20]
 80014ae:	f7ff fea3 	bl	80011f8 <parse_meta_event>
 80014b2:	4603      	mov	r3, r0
 80014b4:	60fb      	str	r3, [r7, #12]
			i = val - 1;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	3b01      	subs	r3, #1
 80014ba:	617b      	str	r3, [r7, #20]
 80014bc:	e03f      	b.n	800153e <parse_song+0xce>
		}
		else{
			int k;
			switch(c_song[i] >> 4){
 80014be:	4b27      	ldr	r3, [pc, #156]	; (800155c <parse_song+0xec>)
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	4413      	add	r3, r2
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	091b      	lsrs	r3, r3, #4
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	3b08      	subs	r3, #8
 80014ce:	2b06      	cmp	r3, #6
 80014d0:	d835      	bhi.n	800153e <parse_song+0xce>
 80014d2:	a201      	add	r2, pc, #4	; (adr r2, 80014d8 <parse_song+0x68>)
 80014d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014d8:	0800152f 	.word	0x0800152f
 80014dc:	080014f5 	.word	0x080014f5
 80014e0:	08001527 	.word	0x08001527
 80014e4:	08001517 	.word	0x08001517
 80014e8:	0800150f 	.word	0x0800150f
 80014ec:	0800151f 	.word	0x0800151f
 80014f0:	08001507 	.word	0x08001507
			case 0x9:
				k = parse_midi_event(i, 0);
 80014f4:	2100      	movs	r1, #0
 80014f6:	6978      	ldr	r0, [r7, #20]
 80014f8:	f7ff fec4 	bl	8001284 <parse_midi_event>
 80014fc:	4603      	mov	r3, r0
 80014fe:	613b      	str	r3, [r7, #16]
				i = k;
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	617b      	str	r3, [r7, #20]
				break;
 8001504:	e01b      	b.n	800153e <parse_song+0xce>
			case 0xE:
				i += 3;
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	3303      	adds	r3, #3
 800150a:	617b      	str	r3, [r7, #20]
				break;
 800150c:	e017      	b.n	800153e <parse_song+0xce>
			case 0xC:
				i += 2;
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	3302      	adds	r3, #2
 8001512:	617b      	str	r3, [r7, #20]
				break;
 8001514:	e013      	b.n	800153e <parse_song+0xce>
			case 0xB:
				i += 3;
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	3303      	adds	r3, #3
 800151a:	617b      	str	r3, [r7, #20]
				break;
 800151c:	e00f      	b.n	800153e <parse_song+0xce>
			case 0xD:
				i += 2;
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	3302      	adds	r3, #2
 8001522:	617b      	str	r3, [r7, #20]
				break;
 8001524:	e00b      	b.n	800153e <parse_song+0xce>
			case 0xA:
				i += 3;
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	3303      	adds	r3, #3
 800152a:	617b      	str	r3, [r7, #20]
				break;
 800152c:	e007      	b.n	800153e <parse_song+0xce>
			case 0x8:
				k = parse_midi_event(i, 1);
 800152e:	2101      	movs	r1, #1
 8001530:	6978      	ldr	r0, [r7, #20]
 8001532:	f7ff fea7 	bl	8001284 <parse_midi_event>
 8001536:	4603      	mov	r3, r0
 8001538:	613b      	str	r3, [r7, #16]
				i = k;
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	617b      	str	r3, [r7, #20]
	for(int i = 0; i < size; i++){
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	3301      	adds	r3, #1
 8001542:	617b      	str	r3, [r7, #20]
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	687a      	ldr	r2, [r7, #4]
 8001548:	429a      	cmp	r2, r3
 800154a:	d89d      	bhi.n	8001488 <parse_song+0x18>
			}
		}
	}
}
 800154c:	bf00      	nop
 800154e:	bf00      	nop
 8001550:	3718      	adds	r7, #24
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	20017544 	.word	0x20017544
 800155c:	2001177c 	.word	0x2001177c

08001560 <play_song>:
/*
 * This function will be used to play the song itself
 * and play a note for its duration for each note that
 * was parsed
 */
uint32_t play_song(unsigned char * song, uint32_t size){
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]
	c_song = song;
 800156a:	4a26      	ldr	r2, [pc, #152]	; (8001604 <play_song+0xa4>)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6013      	str	r3, [r2, #0]
	parse_song(size);
 8001570:	6838      	ldr	r0, [r7, #0]
 8001572:	f7ff ff7d 	bl	8001470 <parse_song>
	time = (tempo / pheader->division) * 10;
 8001576:	4b24      	ldr	r3, [pc, #144]	; (8001608 <play_song+0xa8>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a24      	ldr	r2, [pc, #144]	; (800160c <play_song+0xac>)
 800157c:	6812      	ldr	r2, [r2, #0]
 800157e:	8992      	ldrh	r2, [r2, #12]
 8001580:	fbb3 f2f2 	udiv	r2, r3, r2
 8001584:	4613      	mov	r3, r2
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	4413      	add	r3, r2
 800158a:	005b      	lsls	r3, r3, #1
 800158c:	461a      	mov	r2, r3
 800158e:	4b20      	ldr	r3, [pc, #128]	; (8001610 <play_song+0xb0>)
 8001590:	601a      	str	r2, [r3, #0]
	int index = 0;
 8001592:	2300      	movs	r3, #0
 8001594:	60fb      	str	r3, [r7, #12]
	while(index < note_incre){
 8001596:	e029      	b.n	80015ec <play_song+0x8c>
		add_tone(notes[index].note, notes[index].velocity);
 8001598:	4a1e      	ldr	r2, [pc, #120]	; (8001614 <play_song+0xb4>)
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	00db      	lsls	r3, r3, #3
 800159e:	4413      	add	r3, r2
 80015a0:	791a      	ldrb	r2, [r3, #4]
 80015a2:	491c      	ldr	r1, [pc, #112]	; (8001614 <play_song+0xb4>)
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	00db      	lsls	r3, r3, #3
 80015a8:	440b      	add	r3, r1
 80015aa:	795b      	ldrb	r3, [r3, #5]
 80015ac:	4619      	mov	r1, r3
 80015ae:	4610      	mov	r0, r2
 80015b0:	f000 f9ce 	bl	8001950 <add_tone>
		delay_counter = 0;
 80015b4:	4b18      	ldr	r3, [pc, #96]	; (8001618 <play_song+0xb8>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	601a      	str	r2, [r3, #0]
		while(delay_counter < (time + notes[index].delay)){
 80015ba:	e001      	b.n	80015c0 <play_song+0x60>
			play_tones();
 80015bc:	f000 fa40 	bl	8001a40 <play_tones>
		while(delay_counter < (time + notes[index].delay)){
 80015c0:	4a14      	ldr	r2, [pc, #80]	; (8001614 <play_song+0xb4>)
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80015c8:	4b11      	ldr	r3, [pc, #68]	; (8001610 <play_song+0xb0>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	441a      	add	r2, r3
 80015ce:	4b12      	ldr	r3, [pc, #72]	; (8001618 <play_song+0xb8>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	429a      	cmp	r2, r3
 80015d4:	d8f2      	bhi.n	80015bc <play_song+0x5c>
		}
		remove_tone(notes[index].note);
 80015d6:	4a0f      	ldr	r2, [pc, #60]	; (8001614 <play_song+0xb4>)
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	00db      	lsls	r3, r3, #3
 80015dc:	4413      	add	r3, r2
 80015de:	791b      	ldrb	r3, [r3, #4]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f000 f9f5 	bl	80019d0 <remove_tone>
		index++;
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	3301      	adds	r3, #1
 80015ea:	60fb      	str	r3, [r7, #12]
	while(index < note_incre){
 80015ec:	68fa      	ldr	r2, [r7, #12]
 80015ee:	4b0b      	ldr	r3, [pc, #44]	; (800161c <play_song+0xbc>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	429a      	cmp	r2, r3
 80015f4:	d3d0      	bcc.n	8001598 <play_song+0x38>
	}
	return note_incre;
 80015f6:	4b09      	ldr	r3, [pc, #36]	; (800161c <play_song+0xbc>)
 80015f8:	681b      	ldr	r3, [r3, #0]
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3710      	adds	r7, #16
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	2001177c 	.word	0x2001177c
 8001608:	20011780 	.word	0x20011780
 800160c:	20011778 	.word	0x20011778
 8001610:	20017550 	.word	0x20017550
 8001614:	20011784 	.word	0x20011784
 8001618:	20011760 	.word	0x20011760
 800161c:	20017544 	.word	0x20017544

08001620 <parse_song_info>:
unsigned char* current_song;
unsigned char current_name[256];
unsigned char current_copy[256];
unsigned char current_tempo[256];

void parse_song_info(unsigned char* current_song, int index, unsigned char *current){
 8001620:	b480      	push	{r7}
 8001622:	b087      	sub	sp, #28
 8001624:	af00      	add	r7, sp, #0
 8001626:	60f8      	str	r0, [r7, #12]
 8001628:	60b9      	str	r1, [r7, #8]
 800162a:	607a      	str	r2, [r7, #4]
	int length = current_song[index];
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	68fa      	ldr	r2, [r7, #12]
 8001630:	4413      	add	r3, r2
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	613b      	str	r3, [r7, #16]
	index++;
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	3301      	adds	r3, #1
 800163a:	60bb      	str	r3, [r7, #8]

	for(int i = 0; i < length; i++){
 800163c:	2300      	movs	r3, #0
 800163e:	617b      	str	r3, [r7, #20]
 8001640:	e00d      	b.n	800165e <parse_song_info+0x3e>
		current[i] = current_song[index];
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	68fa      	ldr	r2, [r7, #12]
 8001646:	441a      	add	r2, r3
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	6879      	ldr	r1, [r7, #4]
 800164c:	440b      	add	r3, r1
 800164e:	7812      	ldrb	r2, [r2, #0]
 8001650:	701a      	strb	r2, [r3, #0]
		index++;
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	3301      	adds	r3, #1
 8001656:	60bb      	str	r3, [r7, #8]
	for(int i = 0; i < length; i++){
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	3301      	adds	r3, #1
 800165c:	617b      	str	r3, [r7, #20]
 800165e:	697a      	ldr	r2, [r7, #20]
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	429a      	cmp	r2, r3
 8001664:	dbed      	blt.n	8001642 <parse_song_info+0x22>
	}
	current[length] = '\0';
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	687a      	ldr	r2, [r7, #4]
 800166a:	4413      	add	r3, r2
 800166c:	2200      	movs	r2, #0
 800166e:	701a      	strb	r2, [r3, #0]
}
 8001670:	bf00      	nop
 8001672:	371c      	adds	r7, #28
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr

0800167c <parse_meta>:

void parse_meta(unsigned char* c_song, unsigned int size){
 800167c:	b580      	push	{r7, lr}
 800167e:	b086      	sub	sp, #24
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	6039      	str	r1, [r7, #0]
	uint8_t valid = 1;
 8001686:	2301      	movs	r3, #1
 8001688:	75fb      	strb	r3, [r7, #23]
	uint32_t real_tempo;
	current_song = c_song;
 800168a:	4a47      	ldr	r2, [pc, #284]	; (80017a8 <parse_meta+0x12c>)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6013      	str	r3, [r2, #0]
	for(int i = 0; i < size; i++){
 8001690:	2300      	movs	r3, #0
 8001692:	60fb      	str	r3, [r7, #12]
 8001694:	e04f      	b.n	8001736 <parse_meta+0xba>
		if(current_song[i] == 0xFF){
 8001696:	4b44      	ldr	r3, [pc, #272]	; (80017a8 <parse_meta+0x12c>)
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	4413      	add	r3, r2
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	2bff      	cmp	r3, #255	; 0xff
 80016a2:	d145      	bne.n	8001730 <parse_meta+0xb4>
			if(current_song[i+1] == 0x03 && valid == 1){
 80016a4:	4b40      	ldr	r3, [pc, #256]	; (80017a8 <parse_meta+0x12c>)
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	3301      	adds	r3, #1
 80016ac:	4413      	add	r3, r2
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	2b03      	cmp	r3, #3
 80016b2:	d110      	bne.n	80016d6 <parse_meta+0x5a>
 80016b4:	7dfb      	ldrb	r3, [r7, #23]
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d10d      	bne.n	80016d6 <parse_meta+0x5a>
				parse_song_info(current_song, i + 2, current_name);
 80016ba:	4b3b      	ldr	r3, [pc, #236]	; (80017a8 <parse_meta+0x12c>)
 80016bc:	6818      	ldr	r0, [r3, #0]
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	3302      	adds	r3, #2
 80016c2:	4a3a      	ldr	r2, [pc, #232]	; (80017ac <parse_meta+0x130>)
 80016c4:	4619      	mov	r1, r3
 80016c6:	f7ff ffab 	bl	8001620 <parse_song_info>
				name = current_name;
 80016ca:	4b39      	ldr	r3, [pc, #228]	; (80017b0 <parse_meta+0x134>)
 80016cc:	4a37      	ldr	r2, [pc, #220]	; (80017ac <parse_meta+0x130>)
 80016ce:	601a      	str	r2, [r3, #0]
				valid = 0;
 80016d0:	2300      	movs	r3, #0
 80016d2:	75fb      	strb	r3, [r7, #23]
 80016d4:	e02c      	b.n	8001730 <parse_meta+0xb4>
			}
			else if(current_song[i+1] == 0x51){
 80016d6:	4b34      	ldr	r3, [pc, #208]	; (80017a8 <parse_meta+0x12c>)
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	3301      	adds	r3, #1
 80016de:	4413      	add	r3, r2
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	2b51      	cmp	r3, #81	; 0x51
 80016e4:	d111      	bne.n	800170a <parse_meta+0x8e>
				parse_song_info(current_song, i + 2, current_tempo);
 80016e6:	4b30      	ldr	r3, [pc, #192]	; (80017a8 <parse_meta+0x12c>)
 80016e8:	6818      	ldr	r0, [r3, #0]
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	3302      	adds	r3, #2
 80016ee:	4a31      	ldr	r2, [pc, #196]	; (80017b4 <parse_meta+0x138>)
 80016f0:	4619      	mov	r1, r3
 80016f2:	f7ff ff95 	bl	8001620 <parse_song_info>
				tempo = current_tempo;
 80016f6:	4b30      	ldr	r3, [pc, #192]	; (80017b8 <parse_meta+0x13c>)
 80016f8:	4a2e      	ldr	r2, [pc, #184]	; (80017b4 <parse_meta+0x138>)
 80016fa:	601a      	str	r2, [r3, #0]
				real_tempo = convert_to_uint24(tempo);
 80016fc:	4b2e      	ldr	r3, [pc, #184]	; (80017b8 <parse_meta+0x13c>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4618      	mov	r0, r3
 8001702:	f7ff fd35 	bl	8001170 <convert_to_uint24>
 8001706:	6138      	str	r0, [r7, #16]
 8001708:	e012      	b.n	8001730 <parse_meta+0xb4>
			}
			else if(current_song[i+1] == 0x02){
 800170a:	4b27      	ldr	r3, [pc, #156]	; (80017a8 <parse_meta+0x12c>)
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	3301      	adds	r3, #1
 8001712:	4413      	add	r3, r2
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	2b02      	cmp	r3, #2
 8001718:	d10a      	bne.n	8001730 <parse_meta+0xb4>
				parse_song_info(current_song, i + 2, current_copy);
 800171a:	4b23      	ldr	r3, [pc, #140]	; (80017a8 <parse_meta+0x12c>)
 800171c:	6818      	ldr	r0, [r3, #0]
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	3302      	adds	r3, #2
 8001722:	4a26      	ldr	r2, [pc, #152]	; (80017bc <parse_meta+0x140>)
 8001724:	4619      	mov	r1, r3
 8001726:	f7ff ff7b 	bl	8001620 <parse_song_info>
				copyright = current_copy;
 800172a:	4b25      	ldr	r3, [pc, #148]	; (80017c0 <parse_meta+0x144>)
 800172c:	4a23      	ldr	r2, [pc, #140]	; (80017bc <parse_meta+0x140>)
 800172e:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < size; i++){
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	3301      	adds	r3, #1
 8001734:	60fb      	str	r3, [r7, #12]
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	683a      	ldr	r2, [r7, #0]
 800173a:	429a      	cmp	r2, r3
 800173c:	d8ab      	bhi.n	8001696 <parse_meta+0x1a>
			}
		}
	}
	prints("Title: %s\r\n", name);
 800173e:	4b1c      	ldr	r3, [pc, #112]	; (80017b0 <parse_meta+0x134>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4619      	mov	r1, r3
 8001744:	481f      	ldr	r0, [pc, #124]	; (80017c4 <parse_meta+0x148>)
 8001746:	f000 f845 	bl	80017d4 <prints>
	if(copyright[0] == '\0'){
 800174a:	4b1d      	ldr	r3, [pc, #116]	; (80017c0 <parse_meta+0x144>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d103      	bne.n	800175c <parse_meta+0xe0>
		prints("Copyright: NA\r\n");
 8001754:	481c      	ldr	r0, [pc, #112]	; (80017c8 <parse_meta+0x14c>)
 8001756:	f000 f83d 	bl	80017d4 <prints>
 800175a:	e005      	b.n	8001768 <parse_meta+0xec>
	}
	else{
		prints("Copyright: %s\r\n", copyright);
 800175c:	4b18      	ldr	r3, [pc, #96]	; (80017c0 <parse_meta+0x144>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4619      	mov	r1, r3
 8001762:	481a      	ldr	r0, [pc, #104]	; (80017cc <parse_meta+0x150>)
 8001764:	f000 f836 	bl	80017d4 <prints>
	}

	prints("Tempo: %d\r\n", real_tempo);
 8001768:	6939      	ldr	r1, [r7, #16]
 800176a:	4819      	ldr	r0, [pc, #100]	; (80017d0 <parse_meta+0x154>)
 800176c:	f000 f832 	bl	80017d4 <prints>
	memset(name, 0, 256);
 8001770:	4b0f      	ldr	r3, [pc, #60]	; (80017b0 <parse_meta+0x134>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001778:	2100      	movs	r1, #0
 800177a:	4618      	mov	r0, r3
 800177c:	f000 fdd4 	bl	8002328 <memset>
	memset(copyright, 0, 256);
 8001780:	4b0f      	ldr	r3, [pc, #60]	; (80017c0 <parse_meta+0x144>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001788:	2100      	movs	r1, #0
 800178a:	4618      	mov	r0, r3
 800178c:	f000 fdcc 	bl	8002328 <memset>
	memset(tempo, 0, 256);
 8001790:	4b09      	ldr	r3, [pc, #36]	; (80017b8 <parse_meta+0x13c>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001798:	2100      	movs	r1, #0
 800179a:	4618      	mov	r0, r3
 800179c:	f000 fdc4 	bl	8002328 <memset>
}
 80017a0:	bf00      	nop
 80017a2:	3718      	adds	r7, #24
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	20017560 	.word	0x20017560
 80017ac:	20017564 	.word	0x20017564
 80017b0:	20017554 	.word	0x20017554
 80017b4:	20017764 	.word	0x20017764
 80017b8:	20017558 	.word	0x20017558
 80017bc:	20017664 	.word	0x20017664
 80017c0:	2001755c 	.word	0x2001755c
 80017c4:	08002dac 	.word	0x08002dac
 80017c8:	08002db8 	.word	0x08002db8
 80017cc:	08002dc8 	.word	0x08002dc8
 80017d0:	08002dd8 	.word	0x08002dd8

080017d4 <prints>:

#include <stdio.h>
#include <stdarg.h>
#include "UART.h"

void prints(char *format, ...){
 80017d4:	b40f      	push	{r0, r1, r2, r3}
 80017d6:	b580      	push	{r7, lr}
 80017d8:	b096      	sub	sp, #88	; 0x58
 80017da:	af00      	add	r7, sp, #0
	va_list aptr;
	char buffer[80];
	va_start(aptr, format);
 80017dc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80017e0:	653b      	str	r3, [r7, #80]	; 0x50

	int ret = vsprintf(buffer, format, aptr);
 80017e2:	463b      	mov	r3, r7
 80017e4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80017e6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80017e8:	4618      	mov	r0, r3
 80017ea:	f000 fdbb 	bl	8002364 <vsiprintf>
 80017ee:	6578      	str	r0, [r7, #84]	; 0x54
	va_end(aptr);

	USART_Write(USART2, (uint8_t*)buffer, ret);
 80017f0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80017f2:	463b      	mov	r3, r7
 80017f4:	4619      	mov	r1, r3
 80017f6:	4805      	ldr	r0, [pc, #20]	; (800180c <prints+0x38>)
 80017f8:	f7ff f8a2 	bl	8000940 <USART_Write>
}
 80017fc:	bf00      	nop
 80017fe:	3758      	adds	r7, #88	; 0x58
 8001800:	46bd      	mov	sp, r7
 8001802:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001806:	b004      	add	sp, #16
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	40004400 	.word	0x40004400

08001810 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b086      	sub	sp, #24
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001818:	4a14      	ldr	r2, [pc, #80]	; (800186c <_sbrk+0x5c>)
 800181a:	4b15      	ldr	r3, [pc, #84]	; (8001870 <_sbrk+0x60>)
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001824:	4b13      	ldr	r3, [pc, #76]	; (8001874 <_sbrk+0x64>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d102      	bne.n	8001832 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800182c:	4b11      	ldr	r3, [pc, #68]	; (8001874 <_sbrk+0x64>)
 800182e:	4a12      	ldr	r2, [pc, #72]	; (8001878 <_sbrk+0x68>)
 8001830:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001832:	4b10      	ldr	r3, [pc, #64]	; (8001874 <_sbrk+0x64>)
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4413      	add	r3, r2
 800183a:	693a      	ldr	r2, [r7, #16]
 800183c:	429a      	cmp	r2, r3
 800183e:	d207      	bcs.n	8001850 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001840:	f000 fd48 	bl	80022d4 <__errno>
 8001844:	4603      	mov	r3, r0
 8001846:	220c      	movs	r2, #12
 8001848:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800184a:	f04f 33ff 	mov.w	r3, #4294967295
 800184e:	e009      	b.n	8001864 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001850:	4b08      	ldr	r3, [pc, #32]	; (8001874 <_sbrk+0x64>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001856:	4b07      	ldr	r3, [pc, #28]	; (8001874 <_sbrk+0x64>)
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4413      	add	r3, r2
 800185e:	4a05      	ldr	r2, [pc, #20]	; (8001874 <_sbrk+0x64>)
 8001860:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001862:	68fb      	ldr	r3, [r7, #12]
}
 8001864:	4618      	mov	r0, r3
 8001866:	3718      	adds	r7, #24
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	20018000 	.word	0x20018000
 8001870:	00000400 	.word	0x00000400
 8001874:	20017864 	.word	0x20017864
 8001878:	20017890 	.word	0x20017890

0800187c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001880:	4b17      	ldr	r3, [pc, #92]	; (80018e0 <SystemInit+0x64>)
 8001882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001886:	4a16      	ldr	r2, [pc, #88]	; (80018e0 <SystemInit+0x64>)
 8001888:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800188c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001890:	4b14      	ldr	r3, [pc, #80]	; (80018e4 <SystemInit+0x68>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a13      	ldr	r2, [pc, #76]	; (80018e4 <SystemInit+0x68>)
 8001896:	f043 0301 	orr.w	r3, r3, #1
 800189a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800189c:	4b11      	ldr	r3, [pc, #68]	; (80018e4 <SystemInit+0x68>)
 800189e:	2200      	movs	r2, #0
 80018a0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80018a2:	4b10      	ldr	r3, [pc, #64]	; (80018e4 <SystemInit+0x68>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a0f      	ldr	r2, [pc, #60]	; (80018e4 <SystemInit+0x68>)
 80018a8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80018ac:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80018b0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80018b2:	4b0c      	ldr	r3, [pc, #48]	; (80018e4 <SystemInit+0x68>)
 80018b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80018b8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80018ba:	4b0a      	ldr	r3, [pc, #40]	; (80018e4 <SystemInit+0x68>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a09      	ldr	r2, [pc, #36]	; (80018e4 <SystemInit+0x68>)
 80018c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018c4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80018c6:	4b07      	ldr	r3, [pc, #28]	; (80018e4 <SystemInit+0x68>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80018cc:	4b04      	ldr	r3, [pc, #16]	; (80018e0 <SystemInit+0x64>)
 80018ce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80018d2:	609a      	str	r2, [r3, #8]
#endif
}
 80018d4:	bf00      	nop
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	e000ed00 	.word	0xe000ed00
 80018e4:	40021000 	.word	0x40021000

080018e8 <get_systick_registers>:
 *      Author: Andre
 */

#include "systick.h"

systick_t* get_systick_registers(){
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
	return (systick_t*)SYST;
 80018ec:	4b02      	ldr	r3, [pc, #8]	; (80018f8 <get_systick_registers+0x10>)
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr
 80018f8:	e000e010 	.word	0xe000e010

080018fc <hertz_to_duration>:
   but it is here for standalone testing
*/


// Convert from hertz to ticks
uint16_t hertz_to_duration (float hertz) {
 80018fc:	b480      	push	{r7}
 80018fe:	b085      	sub	sp, #20
 8001900:	af00      	add	r7, sp, #0
 8001902:	ed87 0a01 	vstr	s0, [r7, #4]
	if (hertz == 0)
 8001906:	edd7 7a01 	vldr	s15, [r7, #4]
 800190a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800190e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001912:	d101      	bne.n	8001918 <hertz_to_duration+0x1c>
		return 0;
 8001914:	2300      	movs	r3, #0
 8001916:	e012      	b.n	800193e <hertz_to_duration+0x42>
	float duration = 1 / hertz;
 8001918:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800191c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001920:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001924:	edc7 7a03 	vstr	s15, [r7, #12]
	return (uint16_t) (duration * TICK_SPEED);
 8001928:	edd7 7a03 	vldr	s15, [r7, #12]
 800192c:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800194c <hertz_to_duration+0x50>
 8001930:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001934:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001938:	ee17 3a90 	vmov	r3, s15
 800193c:	b29b      	uxth	r3, r3
}
 800193e:	4618      	mov	r0, r3
 8001940:	3714      	adds	r7, #20
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	47c35000 	.word	0x47c35000

08001950 <add_tone>:
uint32_t get_counter () {
	return tone_counter;
}

// Add a tone to the tones array
uint8_t add_tone (uint8_t note, uint8_t velocity) {
 8001950:	b580      	push	{r7, lr}
 8001952:	b088      	sub	sp, #32
 8001954:	af00      	add	r7, sp, #0
 8001956:	4603      	mov	r3, r0
 8001958:	460a      	mov	r2, r1
 800195a:	71fb      	strb	r3, [r7, #7]
 800195c:	4613      	mov	r3, r2
 800195e:	71bb      	strb	r3, [r7, #6]
	float tone = notes[note];
 8001960:	79fb      	ldrb	r3, [r7, #7]
 8001962:	4a19      	ldr	r2, [pc, #100]	; (80019c8 <add_tone+0x78>)
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	4413      	add	r3, r2
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	617b      	str	r3, [r7, #20]
	uint16_t duration = hertz_to_duration(tone);
 800196c:	ed97 0a05 	vldr	s0, [r7, #20]
 8001970:	f7ff ffc4 	bl	80018fc <hertz_to_duration>
 8001974:	4603      	mov	r3, r0
 8001976:	827b      	strh	r3, [r7, #18]
	uint16_t power = velocity;
 8001978:	79bb      	ldrb	r3, [r7, #6]
 800197a:	823b      	strh	r3, [r7, #16]
	tone_info new_tone;
	new_tone.duration = duration;
 800197c:	8a7b      	ldrh	r3, [r7, #18]
 800197e:	813b      	strh	r3, [r7, #8]
	new_tone.power = power;
 8001980:	8a3b      	ldrh	r3, [r7, #16]
 8001982:	817b      	strh	r3, [r7, #10]
	uint8_t count = 0;
 8001984:	2300      	movs	r3, #0
 8001986:	77fb      	strb	r3, [r7, #31]
	int length = sizeof(tones);
 8001988:	230c      	movs	r3, #12
 800198a:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < length; i++){
 800198c:	2300      	movs	r3, #0
 800198e:	61bb      	str	r3, [r7, #24]
 8001990:	e00b      	b.n	80019aa <add_tone+0x5a>
		if(tones[i].duration == 0){
 8001992:	4a0e      	ldr	r2, [pc, #56]	; (80019cc <add_tone+0x7c>)
 8001994:	69bb      	ldr	r3, [r7, #24]
 8001996:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d102      	bne.n	80019a4 <add_tone+0x54>
			count = i;
 800199e:	69bb      	ldr	r3, [r7, #24]
 80019a0:	77fb      	strb	r3, [r7, #31]
			break;
 80019a2:	e006      	b.n	80019b2 <add_tone+0x62>
	for(int i = 0; i < length; i++){
 80019a4:	69bb      	ldr	r3, [r7, #24]
 80019a6:	3301      	adds	r3, #1
 80019a8:	61bb      	str	r3, [r7, #24]
 80019aa:	69ba      	ldr	r2, [r7, #24]
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	429a      	cmp	r2, r3
 80019b0:	dbef      	blt.n	8001992 <add_tone+0x42>
		}
	}
	tones[count] = new_tone;
 80019b2:	7ffb      	ldrb	r3, [r7, #31]
 80019b4:	4905      	ldr	r1, [pc, #20]	; (80019cc <add_tone+0x7c>)
 80019b6:	68ba      	ldr	r2, [r7, #8]
 80019b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	return note;
 80019bc:	79fb      	ldrb	r3, [r7, #7]
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3720      	adds	r7, #32
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	200114b4 	.word	0x200114b4
 80019cc:	2001786c 	.word	0x2001786c

080019d0 <remove_tone>:

// Remove a tone from the tones array
uint8_t remove_tone (uint8_t note) {
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b086      	sub	sp, #24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	4603      	mov	r3, r0
 80019d8:	71fb      	strb	r3, [r7, #7]
	float tone = notes[note];
 80019da:	79fb      	ldrb	r3, [r7, #7]
 80019dc:	4a16      	ldr	r2, [pc, #88]	; (8001a38 <remove_tone+0x68>)
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	4413      	add	r3, r2
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	613b      	str	r3, [r7, #16]
	uint16_t duration = hertz_to_duration(tone);
 80019e6:	ed97 0a04 	vldr	s0, [r7, #16]
 80019ea:	f7ff ff87 	bl	80018fc <hertz_to_duration>
 80019ee:	4603      	mov	r3, r0
 80019f0:	81fb      	strh	r3, [r7, #14]
	int length = sizeof(tones);
 80019f2:	230c      	movs	r3, #12
 80019f4:	60bb      	str	r3, [r7, #8]
	for(int i = 0; i < length; i++){
 80019f6:	2300      	movs	r3, #0
 80019f8:	617b      	str	r3, [r7, #20]
 80019fa:	e014      	b.n	8001a26 <remove_tone+0x56>
		if(tones[i].duration == duration){
 80019fc:	4a0f      	ldr	r2, [pc, #60]	; (8001a3c <remove_tone+0x6c>)
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8001a04:	89fa      	ldrh	r2, [r7, #14]
 8001a06:	429a      	cmp	r2, r3
 8001a08:	d10a      	bne.n	8001a20 <remove_tone+0x50>
			tones[i].duration = 0;
 8001a0a:	4a0c      	ldr	r2, [pc, #48]	; (8001a3c <remove_tone+0x6c>)
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	2100      	movs	r1, #0
 8001a10:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			tones[i].power = 0;
 8001a14:	4a09      	ldr	r2, [pc, #36]	; (8001a3c <remove_tone+0x6c>)
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	4413      	add	r3, r2
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	805a      	strh	r2, [r3, #2]
	for(int i = 0; i < length; i++){
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	3301      	adds	r3, #1
 8001a24:	617b      	str	r3, [r7, #20]
 8001a26:	697a      	ldr	r2, [r7, #20]
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	dbe6      	blt.n	80019fc <remove_tone+0x2c>
		}
	}
	return note;
 8001a2e:	79fb      	ldrb	r3, [r7, #7]
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3718      	adds	r7, #24
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	200114b4 	.word	0x200114b4
 8001a3c:	2001786c 	.word	0x2001786c

08001a40 <play_tones>:

// Play any tones in the array
void play_tones () {
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
	for(int i = 0; i < 3; i++){
 8001a46:	2300      	movs	r3, #0
 8001a48:	60fb      	str	r3, [r7, #12]
 8001a4a:	e02e      	b.n	8001aaa <play_tones+0x6a>
		uint16_t duration = tones[2].duration;
 8001a4c:	4b1b      	ldr	r3, [pc, #108]	; (8001abc <play_tones+0x7c>)
 8001a4e:	891b      	ldrh	r3, [r3, #8]
 8001a50:	807b      	strh	r3, [r7, #2]
		uint16_t power = 0;
 8001a52:	2300      	movs	r3, #0
 8001a54:	817b      	strh	r3, [r7, #10]
		for(int k = 0; k < 3; k++){
 8001a56:	2300      	movs	r3, #0
 8001a58:	607b      	str	r3, [r7, #4]
 8001a5a:	e00a      	b.n	8001a72 <play_tones+0x32>
			power += tones[k].power;
 8001a5c:	4a17      	ldr	r2, [pc, #92]	; (8001abc <play_tones+0x7c>)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	4413      	add	r3, r2
 8001a64:	885a      	ldrh	r2, [r3, #2]
 8001a66:	897b      	ldrh	r3, [r7, #10]
 8001a68:	4413      	add	r3, r2
 8001a6a:	817b      	strh	r3, [r7, #10]
		for(int k = 0; k < 3; k++){
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	3301      	adds	r3, #1
 8001a70:	607b      	str	r3, [r7, #4]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	ddf1      	ble.n	8001a5c <play_tones+0x1c>
		}
		if((tone_counter % duration) < (duration >> 1)){
 8001a78:	4b11      	ldr	r3, [pc, #68]	; (8001ac0 <play_tones+0x80>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	887a      	ldrh	r2, [r7, #2]
 8001a7e:	fbb3 f1f2 	udiv	r1, r3, r2
 8001a82:	fb01 f202 	mul.w	r2, r1, r2
 8001a86:	1a9b      	subs	r3, r3, r2
 8001a88:	887a      	ldrh	r2, [r7, #2]
 8001a8a:	0852      	lsrs	r2, r2, #1
 8001a8c:	b292      	uxth	r2, r2
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d205      	bcs.n	8001a9e <play_tones+0x5e>
			DAC_Set_Value (power << 4);
 8001a92:	897b      	ldrh	r3, [r7, #10]
 8001a94:	011b      	lsls	r3, r3, #4
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7ff f820 	bl	8000adc <DAC_Set_Value>
 8001a9c:	e002      	b.n	8001aa4 <play_tones+0x64>
		}
		else{
			DAC_Set_Value(0);
 8001a9e:	2000      	movs	r0, #0
 8001aa0:	f7ff f81c 	bl	8000adc <DAC_Set_Value>
	for(int i = 0; i < 3; i++){
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	60fb      	str	r3, [r7, #12]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	ddcd      	ble.n	8001a4c <play_tones+0xc>
		}
	}
}
 8001ab0:	bf00      	nop
 8001ab2:	bf00      	nop
 8001ab4:	3710      	adds	r7, #16
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	2001786c 	.word	0x2001786c
 8001ac0:	20017868 	.word	0x20017868

08001ac4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001ac4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001afc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ac8:	f7ff fed8 	bl	800187c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001acc:	480c      	ldr	r0, [pc, #48]	; (8001b00 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ace:	490d      	ldr	r1, [pc, #52]	; (8001b04 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ad0:	4a0d      	ldr	r2, [pc, #52]	; (8001b08 <LoopForever+0xe>)
  movs r3, #0
 8001ad2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ad4:	e002      	b.n	8001adc <LoopCopyDataInit>

08001ad6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ad6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ad8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ada:	3304      	adds	r3, #4

08001adc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001adc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ade:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ae0:	d3f9      	bcc.n	8001ad6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ae2:	4a0a      	ldr	r2, [pc, #40]	; (8001b0c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ae4:	4c0a      	ldr	r4, [pc, #40]	; (8001b10 <LoopForever+0x16>)
  movs r3, #0
 8001ae6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ae8:	e001      	b.n	8001aee <LoopFillZerobss>

08001aea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001aec:	3204      	adds	r2, #4

08001aee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001af0:	d3fb      	bcc.n	8001aea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001af2:	f000 fbf5 	bl	80022e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001af6:	f7ff fb71 	bl	80011dc <main>

08001afa <LoopForever>:

LoopForever:
    b LoopForever
 8001afa:	e7fe      	b.n	8001afa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001afc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001b00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b04:	2001171c 	.word	0x2001171c
  ldr r2, =_sidata
 8001b08:	08002e20 	.word	0x08002e20
  ldr r2, =_sbss
 8001b0c:	2001171c 	.word	0x2001171c
  ldr r4, =_ebss
 8001b10:	2001788c 	.word	0x2001788c

08001b14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b14:	e7fe      	b.n	8001b14 <ADC1_2_IRQHandler>
	...

08001b18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b1c:	4b03      	ldr	r3, [pc, #12]	; (8001b2c <HAL_GetTick+0x14>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	20017878 	.word	0x20017878

08001b30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b084      	sub	sp, #16
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b38:	f7ff ffee 	bl	8001b18 <HAL_GetTick>
 8001b3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b48:	d005      	beq.n	8001b56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001b4a:	4b0a      	ldr	r3, [pc, #40]	; (8001b74 <HAL_Delay+0x44>)
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	461a      	mov	r2, r3
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	4413      	add	r3, r2
 8001b54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b56:	bf00      	nop
 8001b58:	f7ff ffde 	bl	8001b18 <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	68fa      	ldr	r2, [r7, #12]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d8f7      	bhi.n	8001b58 <HAL_Delay+0x28>
  {
  }
}
 8001b68:	bf00      	nop
 8001b6a:	bf00      	nop
 8001b6c:	3710      	adds	r7, #16
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	200116b4 	.word	0x200116b4

08001b78 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d101      	bne.n	8001b8a <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e014      	b.n	8001bb4 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	791b      	ldrb	r3, [r3, #4]
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d105      	bne.n	8001ba0 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2200      	movs	r2, #0
 8001b98:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f7fe ff24 	bl	80009e8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2202      	movs	r2, #2
 8001ba4:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001bb2:	2300      	movs	r3, #0
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3708      	adds	r7, #8
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	795b      	ldrb	r3, [r3, #5]
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d101      	bne.n	8001bd2 <HAL_DAC_Start+0x16>
 8001bce:	2302      	movs	r3, #2
 8001bd0:	e03b      	b.n	8001c4a <HAL_DAC_Start+0x8e>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2202      	movs	r2, #2
 8001bdc:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	6819      	ldr	r1, [r3, #0]
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	f003 0310 	and.w	r3, r3, #16
 8001bea:	2201      	movs	r2, #1
 8001bec:	409a      	lsls	r2, r3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	430a      	orrs	r2, r1
 8001bf4:	601a      	str	r2, [r3, #0]

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx                                     */

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d10f      	bne.n	8001c1c <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8001c06:	2b04      	cmp	r3, #4
 8001c08:	d118      	bne.n	8001c3c <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	685a      	ldr	r2, [r3, #4]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f042 0201 	orr.w	r2, r2, #1
 8001c18:	605a      	str	r2, [r3, #4]
 8001c1a:	e00f      	b.n	8001c3c <HAL_DAC_Start+0x80>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001c26:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001c2a:	d107      	bne.n	8001c3c <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	685a      	ldr	r2, [r3, #4]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f042 0202 	orr.w	r2, r2, #2
 8001c3a:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2200      	movs	r2, #0
 8001c46:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	370c      	adds	r7, #12
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr

08001c56 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8001c56:	b480      	push	{r7}
 8001c58:	b087      	sub	sp, #28
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	60f8      	str	r0, [r7, #12]
 8001c5e:	60b9      	str	r1, [r7, #8]
 8001c60:	607a      	str	r2, [r7, #4]
 8001c62:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8001c64:	2300      	movs	r3, #0
 8001c66:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d105      	bne.n	8001c80 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001c74:	697a      	ldr	r2, [r7, #20]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4413      	add	r3, r2
 8001c7a:	3308      	adds	r3, #8
 8001c7c:	617b      	str	r3, [r7, #20]
 8001c7e:	e004      	b.n	8001c8a <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001c80:	697a      	ldr	r2, [r7, #20]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4413      	add	r3, r2
 8001c86:	3314      	adds	r3, #20
 8001c88:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001c92:	2300      	movs	r3, #0
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	371c      	adds	r7, #28
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b088      	sub	sp, #32
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	60f8      	str	r0, [r7, #12]
 8001ca8:	60b9      	str	r1, [r7, #8]
 8001caa:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8001cac:	2300      	movs	r3, #0
 8001cae:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	795b      	ldrb	r3, [r3, #5]
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d101      	bne.n	8001cbc <HAL_DAC_ConfigChannel+0x1c>
 8001cb8:	2302      	movs	r3, #2
 8001cba:	e107      	b.n	8001ecc <HAL_DAC_ConfigChannel+0x22c>
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	2202      	movs	r2, #2
 8001cc6:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2b04      	cmp	r3, #4
 8001cce:	d174      	bne.n	8001dba <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8001cd0:	f7ff ff22 	bl	8001b18 <HAL_GetTick>
 8001cd4:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d134      	bne.n	8001d46 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001cdc:	e011      	b.n	8001d02 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001cde:	f7ff ff1b 	bl	8001b18 <HAL_GetTick>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	1ad3      	subs	r3, r2, r3
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d90a      	bls.n	8001d02 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	691b      	ldr	r3, [r3, #16]
 8001cf0:	f043 0208 	orr.w	r2, r3, #8
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	2203      	movs	r2, #3
 8001cfc:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e0e4      	b.n	8001ecc <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d1e6      	bne.n	8001cde <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8001d10:	2001      	movs	r0, #1
 8001d12:	f7ff ff0d 	bl	8001b30 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	68ba      	ldr	r2, [r7, #8]
 8001d1c:	6992      	ldr	r2, [r2, #24]
 8001d1e:	641a      	str	r2, [r3, #64]	; 0x40
 8001d20:	e01e      	b.n	8001d60 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001d22:	f7ff fef9 	bl	8001b18 <HAL_GetTick>
 8001d26:	4602      	mov	r2, r0
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d90a      	bls.n	8001d46 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	691b      	ldr	r3, [r3, #16]
 8001d34:	f043 0208 	orr.w	r2, r3, #8
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2203      	movs	r2, #3
 8001d40:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	e0c2      	b.n	8001ecc <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	dbe8      	blt.n	8001d22 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8001d50:	2001      	movs	r0, #1
 8001d52:	f7ff feed 	bl	8001b30 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	68ba      	ldr	r2, [r7, #8]
 8001d5c:	6992      	ldr	r2, [r2, #24]
 8001d5e:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	f003 0310 	and.w	r3, r3, #16
 8001d6c:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8001d70:	fa01 f303 	lsl.w	r3, r1, r3
 8001d74:	43db      	mvns	r3, r3
 8001d76:	ea02 0103 	and.w	r1, r2, r3
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	69da      	ldr	r2, [r3, #28]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	f003 0310 	and.w	r3, r3, #16
 8001d84:	409a      	lsls	r2, r3
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	430a      	orrs	r2, r1
 8001d8c:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	f003 0310 	and.w	r3, r3, #16
 8001d9a:	21ff      	movs	r1, #255	; 0xff
 8001d9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001da0:	43db      	mvns	r3, r3
 8001da2:	ea02 0103 	and.w	r1, r2, r3
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	6a1a      	ldr	r2, [r3, #32]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	f003 0310 	and.w	r3, r3, #16
 8001db0:	409a      	lsls	r2, r3
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	430a      	orrs	r2, r1
 8001db8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	691b      	ldr	r3, [r3, #16]
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d11d      	bne.n	8001dfe <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dc8:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f003 0310 	and.w	r3, r3, #16
 8001dd0:	221f      	movs	r2, #31
 8001dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd6:	43db      	mvns	r3, r3
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	4013      	ands	r3, r2
 8001ddc:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	695b      	ldr	r3, [r3, #20]
 8001de2:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	f003 0310 	and.w	r3, r3, #16
 8001dea:	697a      	ldr	r2, [r7, #20]
 8001dec:	fa02 f303 	lsl.w	r3, r2, r3
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	69ba      	ldr	r2, [r7, #24]
 8001dfc:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e04:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f003 0310 	and.w	r3, r3, #16
 8001e0c:	2207      	movs	r2, #7
 8001e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e12:	43db      	mvns	r3, r3
 8001e14:	69ba      	ldr	r2, [r7, #24]
 8001e16:	4013      	ands	r3, r2
 8001e18:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	431a      	orrs	r2, r3
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	f003 0310 	and.w	r3, r3, #16
 8001e32:	697a      	ldr	r2, [r7, #20]
 8001e34:	fa02 f303 	lsl.w	r3, r2, r3
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	69ba      	ldr	r2, [r7, #24]
 8001e44:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	6819      	ldr	r1, [r3, #0]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	f003 0310 	and.w	r3, r3, #16
 8001e52:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e56:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5a:	43da      	mvns	r2, r3
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	400a      	ands	r2, r1
 8001e62:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f003 0310 	and.w	r3, r3, #16
 8001e72:	f640 72fc 	movw	r2, #4092	; 0xffc
 8001e76:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7a:	43db      	mvns	r3, r3
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	4013      	ands	r3, r2
 8001e80:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f003 0310 	and.w	r3, r3, #16
 8001e8e:	697a      	ldr	r2, [r7, #20]
 8001e90:	fa02 f303 	lsl.w	r3, r2, r3
 8001e94:	69ba      	ldr	r2, [r7, #24]
 8001e96:	4313      	orrs	r3, r2
 8001e98:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	6819      	ldr	r1, [r3, #0]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	f003 0310 	and.w	r3, r3, #16
 8001eae:	22c0      	movs	r2, #192	; 0xc0
 8001eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb4:	43da      	mvns	r2, r3
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	400a      	ands	r2, r1
 8001ebc:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001eca:	2300      	movs	r3, #0
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3720      	adds	r7, #32
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b087      	sub	sp, #28
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ee2:	e17f      	b.n	80021e4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	2101      	movs	r1, #1
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	fa01 f303 	lsl.w	r3, r1, r3
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	f000 8171 	beq.w	80021de <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f003 0303 	and.w	r3, r3, #3
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d005      	beq.n	8001f14 <HAL_GPIO_Init+0x40>
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f003 0303 	and.w	r3, r3, #3
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d130      	bne.n	8001f76 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	005b      	lsls	r3, r3, #1
 8001f1e:	2203      	movs	r2, #3
 8001f20:	fa02 f303 	lsl.w	r3, r2, r3
 8001f24:	43db      	mvns	r3, r3
 8001f26:	693a      	ldr	r2, [r7, #16]
 8001f28:	4013      	ands	r3, r2
 8001f2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	68da      	ldr	r2, [r3, #12]
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	005b      	lsls	r3, r3, #1
 8001f34:	fa02 f303 	lsl.w	r3, r2, r3
 8001f38:	693a      	ldr	r2, [r7, #16]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	693a      	ldr	r2, [r7, #16]
 8001f42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f52:	43db      	mvns	r3, r3
 8001f54:	693a      	ldr	r2, [r7, #16]
 8001f56:	4013      	ands	r3, r2
 8001f58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	091b      	lsrs	r3, r3, #4
 8001f60:	f003 0201 	and.w	r2, r3, #1
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6a:	693a      	ldr	r2, [r7, #16]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	693a      	ldr	r2, [r7, #16]
 8001f74:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f003 0303 	and.w	r3, r3, #3
 8001f7e:	2b03      	cmp	r3, #3
 8001f80:	d118      	bne.n	8001fb4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f86:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001f88:	2201      	movs	r2, #1
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f90:	43db      	mvns	r3, r3
 8001f92:	693a      	ldr	r2, [r7, #16]
 8001f94:	4013      	ands	r3, r2
 8001f96:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	08db      	lsrs	r3, r3, #3
 8001f9e:	f003 0201 	and.w	r2, r3, #1
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa8:	693a      	ldr	r2, [r7, #16]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	693a      	ldr	r2, [r7, #16]
 8001fb2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f003 0303 	and.w	r3, r3, #3
 8001fbc:	2b03      	cmp	r3, #3
 8001fbe:	d017      	beq.n	8001ff0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	005b      	lsls	r3, r3, #1
 8001fca:	2203      	movs	r2, #3
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	43db      	mvns	r3, r3
 8001fd2:	693a      	ldr	r2, [r7, #16]
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	689a      	ldr	r2, [r3, #8]
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	005b      	lsls	r3, r3, #1
 8001fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe4:	693a      	ldr	r2, [r7, #16]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	693a      	ldr	r2, [r7, #16]
 8001fee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f003 0303 	and.w	r3, r3, #3
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d123      	bne.n	8002044 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	08da      	lsrs	r2, r3, #3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	3208      	adds	r2, #8
 8002004:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002008:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	f003 0307 	and.w	r3, r3, #7
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	220f      	movs	r2, #15
 8002014:	fa02 f303 	lsl.w	r3, r2, r3
 8002018:	43db      	mvns	r3, r3
 800201a:	693a      	ldr	r2, [r7, #16]
 800201c:	4013      	ands	r3, r2
 800201e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	691a      	ldr	r2, [r3, #16]
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	f003 0307 	and.w	r3, r3, #7
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	fa02 f303 	lsl.w	r3, r2, r3
 8002030:	693a      	ldr	r2, [r7, #16]
 8002032:	4313      	orrs	r3, r2
 8002034:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	08da      	lsrs	r2, r3, #3
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	3208      	adds	r2, #8
 800203e:	6939      	ldr	r1, [r7, #16]
 8002040:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	005b      	lsls	r3, r3, #1
 800204e:	2203      	movs	r2, #3
 8002050:	fa02 f303 	lsl.w	r3, r2, r3
 8002054:	43db      	mvns	r3, r3
 8002056:	693a      	ldr	r2, [r7, #16]
 8002058:	4013      	ands	r3, r2
 800205a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f003 0203 	and.w	r2, r3, #3
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	005b      	lsls	r3, r3, #1
 8002068:	fa02 f303 	lsl.w	r3, r2, r3
 800206c:	693a      	ldr	r2, [r7, #16]
 800206e:	4313      	orrs	r3, r2
 8002070:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	693a      	ldr	r2, [r7, #16]
 8002076:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002080:	2b00      	cmp	r3, #0
 8002082:	f000 80ac 	beq.w	80021de <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002086:	4b5f      	ldr	r3, [pc, #380]	; (8002204 <HAL_GPIO_Init+0x330>)
 8002088:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800208a:	4a5e      	ldr	r2, [pc, #376]	; (8002204 <HAL_GPIO_Init+0x330>)
 800208c:	f043 0301 	orr.w	r3, r3, #1
 8002090:	6613      	str	r3, [r2, #96]	; 0x60
 8002092:	4b5c      	ldr	r3, [pc, #368]	; (8002204 <HAL_GPIO_Init+0x330>)
 8002094:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002096:	f003 0301 	and.w	r3, r3, #1
 800209a:	60bb      	str	r3, [r7, #8]
 800209c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800209e:	4a5a      	ldr	r2, [pc, #360]	; (8002208 <HAL_GPIO_Init+0x334>)
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	089b      	lsrs	r3, r3, #2
 80020a4:	3302      	adds	r3, #2
 80020a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	f003 0303 	and.w	r3, r3, #3
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	220f      	movs	r2, #15
 80020b6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ba:	43db      	mvns	r3, r3
 80020bc:	693a      	ldr	r2, [r7, #16]
 80020be:	4013      	ands	r3, r2
 80020c0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80020c8:	d025      	beq.n	8002116 <HAL_GPIO_Init+0x242>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a4f      	ldr	r2, [pc, #316]	; (800220c <HAL_GPIO_Init+0x338>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d01f      	beq.n	8002112 <HAL_GPIO_Init+0x23e>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a4e      	ldr	r2, [pc, #312]	; (8002210 <HAL_GPIO_Init+0x33c>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d019      	beq.n	800210e <HAL_GPIO_Init+0x23a>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a4d      	ldr	r2, [pc, #308]	; (8002214 <HAL_GPIO_Init+0x340>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d013      	beq.n	800210a <HAL_GPIO_Init+0x236>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a4c      	ldr	r2, [pc, #304]	; (8002218 <HAL_GPIO_Init+0x344>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d00d      	beq.n	8002106 <HAL_GPIO_Init+0x232>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a4b      	ldr	r2, [pc, #300]	; (800221c <HAL_GPIO_Init+0x348>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d007      	beq.n	8002102 <HAL_GPIO_Init+0x22e>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a4a      	ldr	r2, [pc, #296]	; (8002220 <HAL_GPIO_Init+0x34c>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d101      	bne.n	80020fe <HAL_GPIO_Init+0x22a>
 80020fa:	2306      	movs	r3, #6
 80020fc:	e00c      	b.n	8002118 <HAL_GPIO_Init+0x244>
 80020fe:	2307      	movs	r3, #7
 8002100:	e00a      	b.n	8002118 <HAL_GPIO_Init+0x244>
 8002102:	2305      	movs	r3, #5
 8002104:	e008      	b.n	8002118 <HAL_GPIO_Init+0x244>
 8002106:	2304      	movs	r3, #4
 8002108:	e006      	b.n	8002118 <HAL_GPIO_Init+0x244>
 800210a:	2303      	movs	r3, #3
 800210c:	e004      	b.n	8002118 <HAL_GPIO_Init+0x244>
 800210e:	2302      	movs	r3, #2
 8002110:	e002      	b.n	8002118 <HAL_GPIO_Init+0x244>
 8002112:	2301      	movs	r3, #1
 8002114:	e000      	b.n	8002118 <HAL_GPIO_Init+0x244>
 8002116:	2300      	movs	r3, #0
 8002118:	697a      	ldr	r2, [r7, #20]
 800211a:	f002 0203 	and.w	r2, r2, #3
 800211e:	0092      	lsls	r2, r2, #2
 8002120:	4093      	lsls	r3, r2
 8002122:	693a      	ldr	r2, [r7, #16]
 8002124:	4313      	orrs	r3, r2
 8002126:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002128:	4937      	ldr	r1, [pc, #220]	; (8002208 <HAL_GPIO_Init+0x334>)
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	089b      	lsrs	r3, r3, #2
 800212e:	3302      	adds	r3, #2
 8002130:	693a      	ldr	r2, [r7, #16]
 8002132:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002136:	4b3b      	ldr	r3, [pc, #236]	; (8002224 <HAL_GPIO_Init+0x350>)
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	43db      	mvns	r3, r3
 8002140:	693a      	ldr	r2, [r7, #16]
 8002142:	4013      	ands	r3, r2
 8002144:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d003      	beq.n	800215a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002152:	693a      	ldr	r2, [r7, #16]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	4313      	orrs	r3, r2
 8002158:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800215a:	4a32      	ldr	r2, [pc, #200]	; (8002224 <HAL_GPIO_Init+0x350>)
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002160:	4b30      	ldr	r3, [pc, #192]	; (8002224 <HAL_GPIO_Init+0x350>)
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	43db      	mvns	r3, r3
 800216a:	693a      	ldr	r2, [r7, #16]
 800216c:	4013      	ands	r3, r2
 800216e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d003      	beq.n	8002184 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800217c:	693a      	ldr	r2, [r7, #16]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	4313      	orrs	r3, r2
 8002182:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002184:	4a27      	ldr	r2, [pc, #156]	; (8002224 <HAL_GPIO_Init+0x350>)
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800218a:	4b26      	ldr	r3, [pc, #152]	; (8002224 <HAL_GPIO_Init+0x350>)
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	43db      	mvns	r3, r3
 8002194:	693a      	ldr	r2, [r7, #16]
 8002196:	4013      	ands	r3, r2
 8002198:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d003      	beq.n	80021ae <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80021a6:	693a      	ldr	r2, [r7, #16]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80021ae:	4a1d      	ldr	r2, [pc, #116]	; (8002224 <HAL_GPIO_Init+0x350>)
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80021b4:	4b1b      	ldr	r3, [pc, #108]	; (8002224 <HAL_GPIO_Init+0x350>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	43db      	mvns	r3, r3
 80021be:	693a      	ldr	r2, [r7, #16]
 80021c0:	4013      	ands	r3, r2
 80021c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d003      	beq.n	80021d8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80021d0:	693a      	ldr	r2, [r7, #16]
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80021d8:	4a12      	ldr	r2, [pc, #72]	; (8002224 <HAL_GPIO_Init+0x350>)
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	3301      	adds	r3, #1
 80021e2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	fa22 f303 	lsr.w	r3, r2, r3
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	f47f ae78 	bne.w	8001ee4 <HAL_GPIO_Init+0x10>
  }
}
 80021f4:	bf00      	nop
 80021f6:	bf00      	nop
 80021f8:	371c      	adds	r7, #28
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	40021000 	.word	0x40021000
 8002208:	40010000 	.word	0x40010000
 800220c:	48000400 	.word	0x48000400
 8002210:	48000800 	.word	0x48000800
 8002214:	48000c00 	.word	0x48000c00
 8002218:	48001000 	.word	0x48001000
 800221c:	48001400 	.word	0x48001400
 8002220:	48001800 	.word	0x48001800
 8002224:	40010400 	.word	0x40010400

08002228 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002228:	b480      	push	{r7}
 800222a:	b085      	sub	sp, #20
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	460b      	mov	r3, r1
 8002232:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	691a      	ldr	r2, [r3, #16]
 8002238:	887b      	ldrh	r3, [r7, #2]
 800223a:	4013      	ands	r3, r2
 800223c:	2b00      	cmp	r3, #0
 800223e:	d002      	beq.n	8002246 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002240:	2301      	movs	r3, #1
 8002242:	73fb      	strb	r3, [r7, #15]
 8002244:	e001      	b.n	800224a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002246:	2300      	movs	r3, #0
 8002248:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800224a:	7bfb      	ldrb	r3, [r7, #15]
}
 800224c:	4618      	mov	r0, r3
 800224e:	3714      	adds	r7, #20
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002258:	b480      	push	{r7}
 800225a:	b085      	sub	sp, #20
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	460b      	mov	r3, r1
 8002262:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	695b      	ldr	r3, [r3, #20]
 8002268:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800226a:	887a      	ldrh	r2, [r7, #2]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	4013      	ands	r3, r2
 8002270:	041a      	lsls	r2, r3, #16
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	43d9      	mvns	r1, r3
 8002276:	887b      	ldrh	r3, [r7, #2]
 8002278:	400b      	ands	r3, r1
 800227a:	431a      	orrs	r2, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	619a      	str	r2, [r3, #24]
}
 8002280:	bf00      	nop
 8002282:	3714      	adds	r7, #20
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr

0800228c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	4603      	mov	r3, r0
 8002294:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002296:	4b08      	ldr	r3, [pc, #32]	; (80022b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002298:	695a      	ldr	r2, [r3, #20]
 800229a:	88fb      	ldrh	r3, [r7, #6]
 800229c:	4013      	ands	r3, r2
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d006      	beq.n	80022b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80022a2:	4a05      	ldr	r2, [pc, #20]	; (80022b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022a4:	88fb      	ldrh	r3, [r7, #6]
 80022a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80022a8:	88fb      	ldrh	r3, [r7, #6]
 80022aa:	4618      	mov	r0, r3
 80022ac:	f000 f806 	bl	80022bc <HAL_GPIO_EXTI_Callback>
  }
}
 80022b0:	bf00      	nop
 80022b2:	3708      	adds	r7, #8
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	40010400 	.word	0x40010400

080022bc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	4603      	mov	r3, r0
 80022c4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80022c6:	bf00      	nop
 80022c8:	370c      	adds	r7, #12
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
	...

080022d4 <__errno>:
 80022d4:	4b01      	ldr	r3, [pc, #4]	; (80022dc <__errno+0x8>)
 80022d6:	6818      	ldr	r0, [r3, #0]
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	200116b8 	.word	0x200116b8

080022e0 <__libc_init_array>:
 80022e0:	b570      	push	{r4, r5, r6, lr}
 80022e2:	4d0d      	ldr	r5, [pc, #52]	; (8002318 <__libc_init_array+0x38>)
 80022e4:	4c0d      	ldr	r4, [pc, #52]	; (800231c <__libc_init_array+0x3c>)
 80022e6:	1b64      	subs	r4, r4, r5
 80022e8:	10a4      	asrs	r4, r4, #2
 80022ea:	2600      	movs	r6, #0
 80022ec:	42a6      	cmp	r6, r4
 80022ee:	d109      	bne.n	8002304 <__libc_init_array+0x24>
 80022f0:	4d0b      	ldr	r5, [pc, #44]	; (8002320 <__libc_init_array+0x40>)
 80022f2:	4c0c      	ldr	r4, [pc, #48]	; (8002324 <__libc_init_array+0x44>)
 80022f4:	f000 fc8e 	bl	8002c14 <_init>
 80022f8:	1b64      	subs	r4, r4, r5
 80022fa:	10a4      	asrs	r4, r4, #2
 80022fc:	2600      	movs	r6, #0
 80022fe:	42a6      	cmp	r6, r4
 8002300:	d105      	bne.n	800230e <__libc_init_array+0x2e>
 8002302:	bd70      	pop	{r4, r5, r6, pc}
 8002304:	f855 3b04 	ldr.w	r3, [r5], #4
 8002308:	4798      	blx	r3
 800230a:	3601      	adds	r6, #1
 800230c:	e7ee      	b.n	80022ec <__libc_init_array+0xc>
 800230e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002312:	4798      	blx	r3
 8002314:	3601      	adds	r6, #1
 8002316:	e7f2      	b.n	80022fe <__libc_init_array+0x1e>
 8002318:	08002e18 	.word	0x08002e18
 800231c:	08002e18 	.word	0x08002e18
 8002320:	08002e18 	.word	0x08002e18
 8002324:	08002e1c 	.word	0x08002e1c

08002328 <memset>:
 8002328:	4402      	add	r2, r0
 800232a:	4603      	mov	r3, r0
 800232c:	4293      	cmp	r3, r2
 800232e:	d100      	bne.n	8002332 <memset+0xa>
 8002330:	4770      	bx	lr
 8002332:	f803 1b01 	strb.w	r1, [r3], #1
 8002336:	e7f9      	b.n	800232c <memset+0x4>

08002338 <_vsiprintf_r>:
 8002338:	b500      	push	{lr}
 800233a:	b09b      	sub	sp, #108	; 0x6c
 800233c:	9100      	str	r1, [sp, #0]
 800233e:	9104      	str	r1, [sp, #16]
 8002340:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002344:	9105      	str	r1, [sp, #20]
 8002346:	9102      	str	r1, [sp, #8]
 8002348:	4905      	ldr	r1, [pc, #20]	; (8002360 <_vsiprintf_r+0x28>)
 800234a:	9103      	str	r1, [sp, #12]
 800234c:	4669      	mov	r1, sp
 800234e:	f000 f86f 	bl	8002430 <_svfiprintf_r>
 8002352:	9b00      	ldr	r3, [sp, #0]
 8002354:	2200      	movs	r2, #0
 8002356:	701a      	strb	r2, [r3, #0]
 8002358:	b01b      	add	sp, #108	; 0x6c
 800235a:	f85d fb04 	ldr.w	pc, [sp], #4
 800235e:	bf00      	nop
 8002360:	ffff0208 	.word	0xffff0208

08002364 <vsiprintf>:
 8002364:	4613      	mov	r3, r2
 8002366:	460a      	mov	r2, r1
 8002368:	4601      	mov	r1, r0
 800236a:	4802      	ldr	r0, [pc, #8]	; (8002374 <vsiprintf+0x10>)
 800236c:	6800      	ldr	r0, [r0, #0]
 800236e:	f7ff bfe3 	b.w	8002338 <_vsiprintf_r>
 8002372:	bf00      	nop
 8002374:	200116b8 	.word	0x200116b8

08002378 <__ssputs_r>:
 8002378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800237c:	688e      	ldr	r6, [r1, #8]
 800237e:	429e      	cmp	r6, r3
 8002380:	4682      	mov	sl, r0
 8002382:	460c      	mov	r4, r1
 8002384:	4690      	mov	r8, r2
 8002386:	461f      	mov	r7, r3
 8002388:	d838      	bhi.n	80023fc <__ssputs_r+0x84>
 800238a:	898a      	ldrh	r2, [r1, #12]
 800238c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002390:	d032      	beq.n	80023f8 <__ssputs_r+0x80>
 8002392:	6825      	ldr	r5, [r4, #0]
 8002394:	6909      	ldr	r1, [r1, #16]
 8002396:	eba5 0901 	sub.w	r9, r5, r1
 800239a:	6965      	ldr	r5, [r4, #20]
 800239c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80023a0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80023a4:	3301      	adds	r3, #1
 80023a6:	444b      	add	r3, r9
 80023a8:	106d      	asrs	r5, r5, #1
 80023aa:	429d      	cmp	r5, r3
 80023ac:	bf38      	it	cc
 80023ae:	461d      	movcc	r5, r3
 80023b0:	0553      	lsls	r3, r2, #21
 80023b2:	d531      	bpl.n	8002418 <__ssputs_r+0xa0>
 80023b4:	4629      	mov	r1, r5
 80023b6:	f000 fb63 	bl	8002a80 <_malloc_r>
 80023ba:	4606      	mov	r6, r0
 80023bc:	b950      	cbnz	r0, 80023d4 <__ssputs_r+0x5c>
 80023be:	230c      	movs	r3, #12
 80023c0:	f8ca 3000 	str.w	r3, [sl]
 80023c4:	89a3      	ldrh	r3, [r4, #12]
 80023c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023ca:	81a3      	strh	r3, [r4, #12]
 80023cc:	f04f 30ff 	mov.w	r0, #4294967295
 80023d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80023d4:	6921      	ldr	r1, [r4, #16]
 80023d6:	464a      	mov	r2, r9
 80023d8:	f000 fabe 	bl	8002958 <memcpy>
 80023dc:	89a3      	ldrh	r3, [r4, #12]
 80023de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80023e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023e6:	81a3      	strh	r3, [r4, #12]
 80023e8:	6126      	str	r6, [r4, #16]
 80023ea:	6165      	str	r5, [r4, #20]
 80023ec:	444e      	add	r6, r9
 80023ee:	eba5 0509 	sub.w	r5, r5, r9
 80023f2:	6026      	str	r6, [r4, #0]
 80023f4:	60a5      	str	r5, [r4, #8]
 80023f6:	463e      	mov	r6, r7
 80023f8:	42be      	cmp	r6, r7
 80023fa:	d900      	bls.n	80023fe <__ssputs_r+0x86>
 80023fc:	463e      	mov	r6, r7
 80023fe:	6820      	ldr	r0, [r4, #0]
 8002400:	4632      	mov	r2, r6
 8002402:	4641      	mov	r1, r8
 8002404:	f000 fab6 	bl	8002974 <memmove>
 8002408:	68a3      	ldr	r3, [r4, #8]
 800240a:	1b9b      	subs	r3, r3, r6
 800240c:	60a3      	str	r3, [r4, #8]
 800240e:	6823      	ldr	r3, [r4, #0]
 8002410:	4433      	add	r3, r6
 8002412:	6023      	str	r3, [r4, #0]
 8002414:	2000      	movs	r0, #0
 8002416:	e7db      	b.n	80023d0 <__ssputs_r+0x58>
 8002418:	462a      	mov	r2, r5
 800241a:	f000 fba5 	bl	8002b68 <_realloc_r>
 800241e:	4606      	mov	r6, r0
 8002420:	2800      	cmp	r0, #0
 8002422:	d1e1      	bne.n	80023e8 <__ssputs_r+0x70>
 8002424:	6921      	ldr	r1, [r4, #16]
 8002426:	4650      	mov	r0, sl
 8002428:	f000 fabe 	bl	80029a8 <_free_r>
 800242c:	e7c7      	b.n	80023be <__ssputs_r+0x46>
	...

08002430 <_svfiprintf_r>:
 8002430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002434:	4698      	mov	r8, r3
 8002436:	898b      	ldrh	r3, [r1, #12]
 8002438:	061b      	lsls	r3, r3, #24
 800243a:	b09d      	sub	sp, #116	; 0x74
 800243c:	4607      	mov	r7, r0
 800243e:	460d      	mov	r5, r1
 8002440:	4614      	mov	r4, r2
 8002442:	d50e      	bpl.n	8002462 <_svfiprintf_r+0x32>
 8002444:	690b      	ldr	r3, [r1, #16]
 8002446:	b963      	cbnz	r3, 8002462 <_svfiprintf_r+0x32>
 8002448:	2140      	movs	r1, #64	; 0x40
 800244a:	f000 fb19 	bl	8002a80 <_malloc_r>
 800244e:	6028      	str	r0, [r5, #0]
 8002450:	6128      	str	r0, [r5, #16]
 8002452:	b920      	cbnz	r0, 800245e <_svfiprintf_r+0x2e>
 8002454:	230c      	movs	r3, #12
 8002456:	603b      	str	r3, [r7, #0]
 8002458:	f04f 30ff 	mov.w	r0, #4294967295
 800245c:	e0d1      	b.n	8002602 <_svfiprintf_r+0x1d2>
 800245e:	2340      	movs	r3, #64	; 0x40
 8002460:	616b      	str	r3, [r5, #20]
 8002462:	2300      	movs	r3, #0
 8002464:	9309      	str	r3, [sp, #36]	; 0x24
 8002466:	2320      	movs	r3, #32
 8002468:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800246c:	f8cd 800c 	str.w	r8, [sp, #12]
 8002470:	2330      	movs	r3, #48	; 0x30
 8002472:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800261c <_svfiprintf_r+0x1ec>
 8002476:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800247a:	f04f 0901 	mov.w	r9, #1
 800247e:	4623      	mov	r3, r4
 8002480:	469a      	mov	sl, r3
 8002482:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002486:	b10a      	cbz	r2, 800248c <_svfiprintf_r+0x5c>
 8002488:	2a25      	cmp	r2, #37	; 0x25
 800248a:	d1f9      	bne.n	8002480 <_svfiprintf_r+0x50>
 800248c:	ebba 0b04 	subs.w	fp, sl, r4
 8002490:	d00b      	beq.n	80024aa <_svfiprintf_r+0x7a>
 8002492:	465b      	mov	r3, fp
 8002494:	4622      	mov	r2, r4
 8002496:	4629      	mov	r1, r5
 8002498:	4638      	mov	r0, r7
 800249a:	f7ff ff6d 	bl	8002378 <__ssputs_r>
 800249e:	3001      	adds	r0, #1
 80024a0:	f000 80aa 	beq.w	80025f8 <_svfiprintf_r+0x1c8>
 80024a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80024a6:	445a      	add	r2, fp
 80024a8:	9209      	str	r2, [sp, #36]	; 0x24
 80024aa:	f89a 3000 	ldrb.w	r3, [sl]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	f000 80a2 	beq.w	80025f8 <_svfiprintf_r+0x1c8>
 80024b4:	2300      	movs	r3, #0
 80024b6:	f04f 32ff 	mov.w	r2, #4294967295
 80024ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80024be:	f10a 0a01 	add.w	sl, sl, #1
 80024c2:	9304      	str	r3, [sp, #16]
 80024c4:	9307      	str	r3, [sp, #28]
 80024c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80024ca:	931a      	str	r3, [sp, #104]	; 0x68
 80024cc:	4654      	mov	r4, sl
 80024ce:	2205      	movs	r2, #5
 80024d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80024d4:	4851      	ldr	r0, [pc, #324]	; (800261c <_svfiprintf_r+0x1ec>)
 80024d6:	f7fd fe8b 	bl	80001f0 <memchr>
 80024da:	9a04      	ldr	r2, [sp, #16]
 80024dc:	b9d8      	cbnz	r0, 8002516 <_svfiprintf_r+0xe6>
 80024de:	06d0      	lsls	r0, r2, #27
 80024e0:	bf44      	itt	mi
 80024e2:	2320      	movmi	r3, #32
 80024e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80024e8:	0711      	lsls	r1, r2, #28
 80024ea:	bf44      	itt	mi
 80024ec:	232b      	movmi	r3, #43	; 0x2b
 80024ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80024f2:	f89a 3000 	ldrb.w	r3, [sl]
 80024f6:	2b2a      	cmp	r3, #42	; 0x2a
 80024f8:	d015      	beq.n	8002526 <_svfiprintf_r+0xf6>
 80024fa:	9a07      	ldr	r2, [sp, #28]
 80024fc:	4654      	mov	r4, sl
 80024fe:	2000      	movs	r0, #0
 8002500:	f04f 0c0a 	mov.w	ip, #10
 8002504:	4621      	mov	r1, r4
 8002506:	f811 3b01 	ldrb.w	r3, [r1], #1
 800250a:	3b30      	subs	r3, #48	; 0x30
 800250c:	2b09      	cmp	r3, #9
 800250e:	d94e      	bls.n	80025ae <_svfiprintf_r+0x17e>
 8002510:	b1b0      	cbz	r0, 8002540 <_svfiprintf_r+0x110>
 8002512:	9207      	str	r2, [sp, #28]
 8002514:	e014      	b.n	8002540 <_svfiprintf_r+0x110>
 8002516:	eba0 0308 	sub.w	r3, r0, r8
 800251a:	fa09 f303 	lsl.w	r3, r9, r3
 800251e:	4313      	orrs	r3, r2
 8002520:	9304      	str	r3, [sp, #16]
 8002522:	46a2      	mov	sl, r4
 8002524:	e7d2      	b.n	80024cc <_svfiprintf_r+0x9c>
 8002526:	9b03      	ldr	r3, [sp, #12]
 8002528:	1d19      	adds	r1, r3, #4
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	9103      	str	r1, [sp, #12]
 800252e:	2b00      	cmp	r3, #0
 8002530:	bfbb      	ittet	lt
 8002532:	425b      	neglt	r3, r3
 8002534:	f042 0202 	orrlt.w	r2, r2, #2
 8002538:	9307      	strge	r3, [sp, #28]
 800253a:	9307      	strlt	r3, [sp, #28]
 800253c:	bfb8      	it	lt
 800253e:	9204      	strlt	r2, [sp, #16]
 8002540:	7823      	ldrb	r3, [r4, #0]
 8002542:	2b2e      	cmp	r3, #46	; 0x2e
 8002544:	d10c      	bne.n	8002560 <_svfiprintf_r+0x130>
 8002546:	7863      	ldrb	r3, [r4, #1]
 8002548:	2b2a      	cmp	r3, #42	; 0x2a
 800254a:	d135      	bne.n	80025b8 <_svfiprintf_r+0x188>
 800254c:	9b03      	ldr	r3, [sp, #12]
 800254e:	1d1a      	adds	r2, r3, #4
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	9203      	str	r2, [sp, #12]
 8002554:	2b00      	cmp	r3, #0
 8002556:	bfb8      	it	lt
 8002558:	f04f 33ff 	movlt.w	r3, #4294967295
 800255c:	3402      	adds	r4, #2
 800255e:	9305      	str	r3, [sp, #20]
 8002560:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800262c <_svfiprintf_r+0x1fc>
 8002564:	7821      	ldrb	r1, [r4, #0]
 8002566:	2203      	movs	r2, #3
 8002568:	4650      	mov	r0, sl
 800256a:	f7fd fe41 	bl	80001f0 <memchr>
 800256e:	b140      	cbz	r0, 8002582 <_svfiprintf_r+0x152>
 8002570:	2340      	movs	r3, #64	; 0x40
 8002572:	eba0 000a 	sub.w	r0, r0, sl
 8002576:	fa03 f000 	lsl.w	r0, r3, r0
 800257a:	9b04      	ldr	r3, [sp, #16]
 800257c:	4303      	orrs	r3, r0
 800257e:	3401      	adds	r4, #1
 8002580:	9304      	str	r3, [sp, #16]
 8002582:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002586:	4826      	ldr	r0, [pc, #152]	; (8002620 <_svfiprintf_r+0x1f0>)
 8002588:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800258c:	2206      	movs	r2, #6
 800258e:	f7fd fe2f 	bl	80001f0 <memchr>
 8002592:	2800      	cmp	r0, #0
 8002594:	d038      	beq.n	8002608 <_svfiprintf_r+0x1d8>
 8002596:	4b23      	ldr	r3, [pc, #140]	; (8002624 <_svfiprintf_r+0x1f4>)
 8002598:	bb1b      	cbnz	r3, 80025e2 <_svfiprintf_r+0x1b2>
 800259a:	9b03      	ldr	r3, [sp, #12]
 800259c:	3307      	adds	r3, #7
 800259e:	f023 0307 	bic.w	r3, r3, #7
 80025a2:	3308      	adds	r3, #8
 80025a4:	9303      	str	r3, [sp, #12]
 80025a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80025a8:	4433      	add	r3, r6
 80025aa:	9309      	str	r3, [sp, #36]	; 0x24
 80025ac:	e767      	b.n	800247e <_svfiprintf_r+0x4e>
 80025ae:	fb0c 3202 	mla	r2, ip, r2, r3
 80025b2:	460c      	mov	r4, r1
 80025b4:	2001      	movs	r0, #1
 80025b6:	e7a5      	b.n	8002504 <_svfiprintf_r+0xd4>
 80025b8:	2300      	movs	r3, #0
 80025ba:	3401      	adds	r4, #1
 80025bc:	9305      	str	r3, [sp, #20]
 80025be:	4619      	mov	r1, r3
 80025c0:	f04f 0c0a 	mov.w	ip, #10
 80025c4:	4620      	mov	r0, r4
 80025c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80025ca:	3a30      	subs	r2, #48	; 0x30
 80025cc:	2a09      	cmp	r2, #9
 80025ce:	d903      	bls.n	80025d8 <_svfiprintf_r+0x1a8>
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d0c5      	beq.n	8002560 <_svfiprintf_r+0x130>
 80025d4:	9105      	str	r1, [sp, #20]
 80025d6:	e7c3      	b.n	8002560 <_svfiprintf_r+0x130>
 80025d8:	fb0c 2101 	mla	r1, ip, r1, r2
 80025dc:	4604      	mov	r4, r0
 80025de:	2301      	movs	r3, #1
 80025e0:	e7f0      	b.n	80025c4 <_svfiprintf_r+0x194>
 80025e2:	ab03      	add	r3, sp, #12
 80025e4:	9300      	str	r3, [sp, #0]
 80025e6:	462a      	mov	r2, r5
 80025e8:	4b0f      	ldr	r3, [pc, #60]	; (8002628 <_svfiprintf_r+0x1f8>)
 80025ea:	a904      	add	r1, sp, #16
 80025ec:	4638      	mov	r0, r7
 80025ee:	f3af 8000 	nop.w
 80025f2:	1c42      	adds	r2, r0, #1
 80025f4:	4606      	mov	r6, r0
 80025f6:	d1d6      	bne.n	80025a6 <_svfiprintf_r+0x176>
 80025f8:	89ab      	ldrh	r3, [r5, #12]
 80025fa:	065b      	lsls	r3, r3, #25
 80025fc:	f53f af2c 	bmi.w	8002458 <_svfiprintf_r+0x28>
 8002600:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002602:	b01d      	add	sp, #116	; 0x74
 8002604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002608:	ab03      	add	r3, sp, #12
 800260a:	9300      	str	r3, [sp, #0]
 800260c:	462a      	mov	r2, r5
 800260e:	4b06      	ldr	r3, [pc, #24]	; (8002628 <_svfiprintf_r+0x1f8>)
 8002610:	a904      	add	r1, sp, #16
 8002612:	4638      	mov	r0, r7
 8002614:	f000 f87a 	bl	800270c <_printf_i>
 8002618:	e7eb      	b.n	80025f2 <_svfiprintf_r+0x1c2>
 800261a:	bf00      	nop
 800261c:	08002de4 	.word	0x08002de4
 8002620:	08002dee 	.word	0x08002dee
 8002624:	00000000 	.word	0x00000000
 8002628:	08002379 	.word	0x08002379
 800262c:	08002dea 	.word	0x08002dea

08002630 <_printf_common>:
 8002630:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002634:	4616      	mov	r6, r2
 8002636:	4699      	mov	r9, r3
 8002638:	688a      	ldr	r2, [r1, #8]
 800263a:	690b      	ldr	r3, [r1, #16]
 800263c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002640:	4293      	cmp	r3, r2
 8002642:	bfb8      	it	lt
 8002644:	4613      	movlt	r3, r2
 8002646:	6033      	str	r3, [r6, #0]
 8002648:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800264c:	4607      	mov	r7, r0
 800264e:	460c      	mov	r4, r1
 8002650:	b10a      	cbz	r2, 8002656 <_printf_common+0x26>
 8002652:	3301      	adds	r3, #1
 8002654:	6033      	str	r3, [r6, #0]
 8002656:	6823      	ldr	r3, [r4, #0]
 8002658:	0699      	lsls	r1, r3, #26
 800265a:	bf42      	ittt	mi
 800265c:	6833      	ldrmi	r3, [r6, #0]
 800265e:	3302      	addmi	r3, #2
 8002660:	6033      	strmi	r3, [r6, #0]
 8002662:	6825      	ldr	r5, [r4, #0]
 8002664:	f015 0506 	ands.w	r5, r5, #6
 8002668:	d106      	bne.n	8002678 <_printf_common+0x48>
 800266a:	f104 0a19 	add.w	sl, r4, #25
 800266e:	68e3      	ldr	r3, [r4, #12]
 8002670:	6832      	ldr	r2, [r6, #0]
 8002672:	1a9b      	subs	r3, r3, r2
 8002674:	42ab      	cmp	r3, r5
 8002676:	dc26      	bgt.n	80026c6 <_printf_common+0x96>
 8002678:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800267c:	1e13      	subs	r3, r2, #0
 800267e:	6822      	ldr	r2, [r4, #0]
 8002680:	bf18      	it	ne
 8002682:	2301      	movne	r3, #1
 8002684:	0692      	lsls	r2, r2, #26
 8002686:	d42b      	bmi.n	80026e0 <_printf_common+0xb0>
 8002688:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800268c:	4649      	mov	r1, r9
 800268e:	4638      	mov	r0, r7
 8002690:	47c0      	blx	r8
 8002692:	3001      	adds	r0, #1
 8002694:	d01e      	beq.n	80026d4 <_printf_common+0xa4>
 8002696:	6823      	ldr	r3, [r4, #0]
 8002698:	68e5      	ldr	r5, [r4, #12]
 800269a:	6832      	ldr	r2, [r6, #0]
 800269c:	f003 0306 	and.w	r3, r3, #6
 80026a0:	2b04      	cmp	r3, #4
 80026a2:	bf08      	it	eq
 80026a4:	1aad      	subeq	r5, r5, r2
 80026a6:	68a3      	ldr	r3, [r4, #8]
 80026a8:	6922      	ldr	r2, [r4, #16]
 80026aa:	bf0c      	ite	eq
 80026ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80026b0:	2500      	movne	r5, #0
 80026b2:	4293      	cmp	r3, r2
 80026b4:	bfc4      	itt	gt
 80026b6:	1a9b      	subgt	r3, r3, r2
 80026b8:	18ed      	addgt	r5, r5, r3
 80026ba:	2600      	movs	r6, #0
 80026bc:	341a      	adds	r4, #26
 80026be:	42b5      	cmp	r5, r6
 80026c0:	d11a      	bne.n	80026f8 <_printf_common+0xc8>
 80026c2:	2000      	movs	r0, #0
 80026c4:	e008      	b.n	80026d8 <_printf_common+0xa8>
 80026c6:	2301      	movs	r3, #1
 80026c8:	4652      	mov	r2, sl
 80026ca:	4649      	mov	r1, r9
 80026cc:	4638      	mov	r0, r7
 80026ce:	47c0      	blx	r8
 80026d0:	3001      	adds	r0, #1
 80026d2:	d103      	bne.n	80026dc <_printf_common+0xac>
 80026d4:	f04f 30ff 	mov.w	r0, #4294967295
 80026d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80026dc:	3501      	adds	r5, #1
 80026de:	e7c6      	b.n	800266e <_printf_common+0x3e>
 80026e0:	18e1      	adds	r1, r4, r3
 80026e2:	1c5a      	adds	r2, r3, #1
 80026e4:	2030      	movs	r0, #48	; 0x30
 80026e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80026ea:	4422      	add	r2, r4
 80026ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80026f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80026f4:	3302      	adds	r3, #2
 80026f6:	e7c7      	b.n	8002688 <_printf_common+0x58>
 80026f8:	2301      	movs	r3, #1
 80026fa:	4622      	mov	r2, r4
 80026fc:	4649      	mov	r1, r9
 80026fe:	4638      	mov	r0, r7
 8002700:	47c0      	blx	r8
 8002702:	3001      	adds	r0, #1
 8002704:	d0e6      	beq.n	80026d4 <_printf_common+0xa4>
 8002706:	3601      	adds	r6, #1
 8002708:	e7d9      	b.n	80026be <_printf_common+0x8e>
	...

0800270c <_printf_i>:
 800270c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002710:	7e0f      	ldrb	r7, [r1, #24]
 8002712:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002714:	2f78      	cmp	r7, #120	; 0x78
 8002716:	4691      	mov	r9, r2
 8002718:	4680      	mov	r8, r0
 800271a:	460c      	mov	r4, r1
 800271c:	469a      	mov	sl, r3
 800271e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002722:	d807      	bhi.n	8002734 <_printf_i+0x28>
 8002724:	2f62      	cmp	r7, #98	; 0x62
 8002726:	d80a      	bhi.n	800273e <_printf_i+0x32>
 8002728:	2f00      	cmp	r7, #0
 800272a:	f000 80d8 	beq.w	80028de <_printf_i+0x1d2>
 800272e:	2f58      	cmp	r7, #88	; 0x58
 8002730:	f000 80a3 	beq.w	800287a <_printf_i+0x16e>
 8002734:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002738:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800273c:	e03a      	b.n	80027b4 <_printf_i+0xa8>
 800273e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002742:	2b15      	cmp	r3, #21
 8002744:	d8f6      	bhi.n	8002734 <_printf_i+0x28>
 8002746:	a101      	add	r1, pc, #4	; (adr r1, 800274c <_printf_i+0x40>)
 8002748:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800274c:	080027a5 	.word	0x080027a5
 8002750:	080027b9 	.word	0x080027b9
 8002754:	08002735 	.word	0x08002735
 8002758:	08002735 	.word	0x08002735
 800275c:	08002735 	.word	0x08002735
 8002760:	08002735 	.word	0x08002735
 8002764:	080027b9 	.word	0x080027b9
 8002768:	08002735 	.word	0x08002735
 800276c:	08002735 	.word	0x08002735
 8002770:	08002735 	.word	0x08002735
 8002774:	08002735 	.word	0x08002735
 8002778:	080028c5 	.word	0x080028c5
 800277c:	080027e9 	.word	0x080027e9
 8002780:	080028a7 	.word	0x080028a7
 8002784:	08002735 	.word	0x08002735
 8002788:	08002735 	.word	0x08002735
 800278c:	080028e7 	.word	0x080028e7
 8002790:	08002735 	.word	0x08002735
 8002794:	080027e9 	.word	0x080027e9
 8002798:	08002735 	.word	0x08002735
 800279c:	08002735 	.word	0x08002735
 80027a0:	080028af 	.word	0x080028af
 80027a4:	682b      	ldr	r3, [r5, #0]
 80027a6:	1d1a      	adds	r2, r3, #4
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	602a      	str	r2, [r5, #0]
 80027ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80027b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80027b4:	2301      	movs	r3, #1
 80027b6:	e0a3      	b.n	8002900 <_printf_i+0x1f4>
 80027b8:	6820      	ldr	r0, [r4, #0]
 80027ba:	6829      	ldr	r1, [r5, #0]
 80027bc:	0606      	lsls	r6, r0, #24
 80027be:	f101 0304 	add.w	r3, r1, #4
 80027c2:	d50a      	bpl.n	80027da <_printf_i+0xce>
 80027c4:	680e      	ldr	r6, [r1, #0]
 80027c6:	602b      	str	r3, [r5, #0]
 80027c8:	2e00      	cmp	r6, #0
 80027ca:	da03      	bge.n	80027d4 <_printf_i+0xc8>
 80027cc:	232d      	movs	r3, #45	; 0x2d
 80027ce:	4276      	negs	r6, r6
 80027d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80027d4:	485e      	ldr	r0, [pc, #376]	; (8002950 <_printf_i+0x244>)
 80027d6:	230a      	movs	r3, #10
 80027d8:	e019      	b.n	800280e <_printf_i+0x102>
 80027da:	680e      	ldr	r6, [r1, #0]
 80027dc:	602b      	str	r3, [r5, #0]
 80027de:	f010 0f40 	tst.w	r0, #64	; 0x40
 80027e2:	bf18      	it	ne
 80027e4:	b236      	sxthne	r6, r6
 80027e6:	e7ef      	b.n	80027c8 <_printf_i+0xbc>
 80027e8:	682b      	ldr	r3, [r5, #0]
 80027ea:	6820      	ldr	r0, [r4, #0]
 80027ec:	1d19      	adds	r1, r3, #4
 80027ee:	6029      	str	r1, [r5, #0]
 80027f0:	0601      	lsls	r1, r0, #24
 80027f2:	d501      	bpl.n	80027f8 <_printf_i+0xec>
 80027f4:	681e      	ldr	r6, [r3, #0]
 80027f6:	e002      	b.n	80027fe <_printf_i+0xf2>
 80027f8:	0646      	lsls	r6, r0, #25
 80027fa:	d5fb      	bpl.n	80027f4 <_printf_i+0xe8>
 80027fc:	881e      	ldrh	r6, [r3, #0]
 80027fe:	4854      	ldr	r0, [pc, #336]	; (8002950 <_printf_i+0x244>)
 8002800:	2f6f      	cmp	r7, #111	; 0x6f
 8002802:	bf0c      	ite	eq
 8002804:	2308      	moveq	r3, #8
 8002806:	230a      	movne	r3, #10
 8002808:	2100      	movs	r1, #0
 800280a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800280e:	6865      	ldr	r5, [r4, #4]
 8002810:	60a5      	str	r5, [r4, #8]
 8002812:	2d00      	cmp	r5, #0
 8002814:	bfa2      	ittt	ge
 8002816:	6821      	ldrge	r1, [r4, #0]
 8002818:	f021 0104 	bicge.w	r1, r1, #4
 800281c:	6021      	strge	r1, [r4, #0]
 800281e:	b90e      	cbnz	r6, 8002824 <_printf_i+0x118>
 8002820:	2d00      	cmp	r5, #0
 8002822:	d04d      	beq.n	80028c0 <_printf_i+0x1b4>
 8002824:	4615      	mov	r5, r2
 8002826:	fbb6 f1f3 	udiv	r1, r6, r3
 800282a:	fb03 6711 	mls	r7, r3, r1, r6
 800282e:	5dc7      	ldrb	r7, [r0, r7]
 8002830:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002834:	4637      	mov	r7, r6
 8002836:	42bb      	cmp	r3, r7
 8002838:	460e      	mov	r6, r1
 800283a:	d9f4      	bls.n	8002826 <_printf_i+0x11a>
 800283c:	2b08      	cmp	r3, #8
 800283e:	d10b      	bne.n	8002858 <_printf_i+0x14c>
 8002840:	6823      	ldr	r3, [r4, #0]
 8002842:	07de      	lsls	r6, r3, #31
 8002844:	d508      	bpl.n	8002858 <_printf_i+0x14c>
 8002846:	6923      	ldr	r3, [r4, #16]
 8002848:	6861      	ldr	r1, [r4, #4]
 800284a:	4299      	cmp	r1, r3
 800284c:	bfde      	ittt	le
 800284e:	2330      	movle	r3, #48	; 0x30
 8002850:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002854:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002858:	1b52      	subs	r2, r2, r5
 800285a:	6122      	str	r2, [r4, #16]
 800285c:	f8cd a000 	str.w	sl, [sp]
 8002860:	464b      	mov	r3, r9
 8002862:	aa03      	add	r2, sp, #12
 8002864:	4621      	mov	r1, r4
 8002866:	4640      	mov	r0, r8
 8002868:	f7ff fee2 	bl	8002630 <_printf_common>
 800286c:	3001      	adds	r0, #1
 800286e:	d14c      	bne.n	800290a <_printf_i+0x1fe>
 8002870:	f04f 30ff 	mov.w	r0, #4294967295
 8002874:	b004      	add	sp, #16
 8002876:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800287a:	4835      	ldr	r0, [pc, #212]	; (8002950 <_printf_i+0x244>)
 800287c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002880:	6829      	ldr	r1, [r5, #0]
 8002882:	6823      	ldr	r3, [r4, #0]
 8002884:	f851 6b04 	ldr.w	r6, [r1], #4
 8002888:	6029      	str	r1, [r5, #0]
 800288a:	061d      	lsls	r5, r3, #24
 800288c:	d514      	bpl.n	80028b8 <_printf_i+0x1ac>
 800288e:	07df      	lsls	r7, r3, #31
 8002890:	bf44      	itt	mi
 8002892:	f043 0320 	orrmi.w	r3, r3, #32
 8002896:	6023      	strmi	r3, [r4, #0]
 8002898:	b91e      	cbnz	r6, 80028a2 <_printf_i+0x196>
 800289a:	6823      	ldr	r3, [r4, #0]
 800289c:	f023 0320 	bic.w	r3, r3, #32
 80028a0:	6023      	str	r3, [r4, #0]
 80028a2:	2310      	movs	r3, #16
 80028a4:	e7b0      	b.n	8002808 <_printf_i+0xfc>
 80028a6:	6823      	ldr	r3, [r4, #0]
 80028a8:	f043 0320 	orr.w	r3, r3, #32
 80028ac:	6023      	str	r3, [r4, #0]
 80028ae:	2378      	movs	r3, #120	; 0x78
 80028b0:	4828      	ldr	r0, [pc, #160]	; (8002954 <_printf_i+0x248>)
 80028b2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80028b6:	e7e3      	b.n	8002880 <_printf_i+0x174>
 80028b8:	0659      	lsls	r1, r3, #25
 80028ba:	bf48      	it	mi
 80028bc:	b2b6      	uxthmi	r6, r6
 80028be:	e7e6      	b.n	800288e <_printf_i+0x182>
 80028c0:	4615      	mov	r5, r2
 80028c2:	e7bb      	b.n	800283c <_printf_i+0x130>
 80028c4:	682b      	ldr	r3, [r5, #0]
 80028c6:	6826      	ldr	r6, [r4, #0]
 80028c8:	6961      	ldr	r1, [r4, #20]
 80028ca:	1d18      	adds	r0, r3, #4
 80028cc:	6028      	str	r0, [r5, #0]
 80028ce:	0635      	lsls	r5, r6, #24
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	d501      	bpl.n	80028d8 <_printf_i+0x1cc>
 80028d4:	6019      	str	r1, [r3, #0]
 80028d6:	e002      	b.n	80028de <_printf_i+0x1d2>
 80028d8:	0670      	lsls	r0, r6, #25
 80028da:	d5fb      	bpl.n	80028d4 <_printf_i+0x1c8>
 80028dc:	8019      	strh	r1, [r3, #0]
 80028de:	2300      	movs	r3, #0
 80028e0:	6123      	str	r3, [r4, #16]
 80028e2:	4615      	mov	r5, r2
 80028e4:	e7ba      	b.n	800285c <_printf_i+0x150>
 80028e6:	682b      	ldr	r3, [r5, #0]
 80028e8:	1d1a      	adds	r2, r3, #4
 80028ea:	602a      	str	r2, [r5, #0]
 80028ec:	681d      	ldr	r5, [r3, #0]
 80028ee:	6862      	ldr	r2, [r4, #4]
 80028f0:	2100      	movs	r1, #0
 80028f2:	4628      	mov	r0, r5
 80028f4:	f7fd fc7c 	bl	80001f0 <memchr>
 80028f8:	b108      	cbz	r0, 80028fe <_printf_i+0x1f2>
 80028fa:	1b40      	subs	r0, r0, r5
 80028fc:	6060      	str	r0, [r4, #4]
 80028fe:	6863      	ldr	r3, [r4, #4]
 8002900:	6123      	str	r3, [r4, #16]
 8002902:	2300      	movs	r3, #0
 8002904:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002908:	e7a8      	b.n	800285c <_printf_i+0x150>
 800290a:	6923      	ldr	r3, [r4, #16]
 800290c:	462a      	mov	r2, r5
 800290e:	4649      	mov	r1, r9
 8002910:	4640      	mov	r0, r8
 8002912:	47d0      	blx	sl
 8002914:	3001      	adds	r0, #1
 8002916:	d0ab      	beq.n	8002870 <_printf_i+0x164>
 8002918:	6823      	ldr	r3, [r4, #0]
 800291a:	079b      	lsls	r3, r3, #30
 800291c:	d413      	bmi.n	8002946 <_printf_i+0x23a>
 800291e:	68e0      	ldr	r0, [r4, #12]
 8002920:	9b03      	ldr	r3, [sp, #12]
 8002922:	4298      	cmp	r0, r3
 8002924:	bfb8      	it	lt
 8002926:	4618      	movlt	r0, r3
 8002928:	e7a4      	b.n	8002874 <_printf_i+0x168>
 800292a:	2301      	movs	r3, #1
 800292c:	4632      	mov	r2, r6
 800292e:	4649      	mov	r1, r9
 8002930:	4640      	mov	r0, r8
 8002932:	47d0      	blx	sl
 8002934:	3001      	adds	r0, #1
 8002936:	d09b      	beq.n	8002870 <_printf_i+0x164>
 8002938:	3501      	adds	r5, #1
 800293a:	68e3      	ldr	r3, [r4, #12]
 800293c:	9903      	ldr	r1, [sp, #12]
 800293e:	1a5b      	subs	r3, r3, r1
 8002940:	42ab      	cmp	r3, r5
 8002942:	dcf2      	bgt.n	800292a <_printf_i+0x21e>
 8002944:	e7eb      	b.n	800291e <_printf_i+0x212>
 8002946:	2500      	movs	r5, #0
 8002948:	f104 0619 	add.w	r6, r4, #25
 800294c:	e7f5      	b.n	800293a <_printf_i+0x22e>
 800294e:	bf00      	nop
 8002950:	08002df5 	.word	0x08002df5
 8002954:	08002e06 	.word	0x08002e06

08002958 <memcpy>:
 8002958:	440a      	add	r2, r1
 800295a:	4291      	cmp	r1, r2
 800295c:	f100 33ff 	add.w	r3, r0, #4294967295
 8002960:	d100      	bne.n	8002964 <memcpy+0xc>
 8002962:	4770      	bx	lr
 8002964:	b510      	push	{r4, lr}
 8002966:	f811 4b01 	ldrb.w	r4, [r1], #1
 800296a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800296e:	4291      	cmp	r1, r2
 8002970:	d1f9      	bne.n	8002966 <memcpy+0xe>
 8002972:	bd10      	pop	{r4, pc}

08002974 <memmove>:
 8002974:	4288      	cmp	r0, r1
 8002976:	b510      	push	{r4, lr}
 8002978:	eb01 0402 	add.w	r4, r1, r2
 800297c:	d902      	bls.n	8002984 <memmove+0x10>
 800297e:	4284      	cmp	r4, r0
 8002980:	4623      	mov	r3, r4
 8002982:	d807      	bhi.n	8002994 <memmove+0x20>
 8002984:	1e43      	subs	r3, r0, #1
 8002986:	42a1      	cmp	r1, r4
 8002988:	d008      	beq.n	800299c <memmove+0x28>
 800298a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800298e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002992:	e7f8      	b.n	8002986 <memmove+0x12>
 8002994:	4402      	add	r2, r0
 8002996:	4601      	mov	r1, r0
 8002998:	428a      	cmp	r2, r1
 800299a:	d100      	bne.n	800299e <memmove+0x2a>
 800299c:	bd10      	pop	{r4, pc}
 800299e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80029a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80029a6:	e7f7      	b.n	8002998 <memmove+0x24>

080029a8 <_free_r>:
 80029a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80029aa:	2900      	cmp	r1, #0
 80029ac:	d044      	beq.n	8002a38 <_free_r+0x90>
 80029ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80029b2:	9001      	str	r0, [sp, #4]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	f1a1 0404 	sub.w	r4, r1, #4
 80029ba:	bfb8      	it	lt
 80029bc:	18e4      	addlt	r4, r4, r3
 80029be:	f000 f913 	bl	8002be8 <__malloc_lock>
 80029c2:	4a1e      	ldr	r2, [pc, #120]	; (8002a3c <_free_r+0x94>)
 80029c4:	9801      	ldr	r0, [sp, #4]
 80029c6:	6813      	ldr	r3, [r2, #0]
 80029c8:	b933      	cbnz	r3, 80029d8 <_free_r+0x30>
 80029ca:	6063      	str	r3, [r4, #4]
 80029cc:	6014      	str	r4, [r2, #0]
 80029ce:	b003      	add	sp, #12
 80029d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80029d4:	f000 b90e 	b.w	8002bf4 <__malloc_unlock>
 80029d8:	42a3      	cmp	r3, r4
 80029da:	d908      	bls.n	80029ee <_free_r+0x46>
 80029dc:	6825      	ldr	r5, [r4, #0]
 80029de:	1961      	adds	r1, r4, r5
 80029e0:	428b      	cmp	r3, r1
 80029e2:	bf01      	itttt	eq
 80029e4:	6819      	ldreq	r1, [r3, #0]
 80029e6:	685b      	ldreq	r3, [r3, #4]
 80029e8:	1949      	addeq	r1, r1, r5
 80029ea:	6021      	streq	r1, [r4, #0]
 80029ec:	e7ed      	b.n	80029ca <_free_r+0x22>
 80029ee:	461a      	mov	r2, r3
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	b10b      	cbz	r3, 80029f8 <_free_r+0x50>
 80029f4:	42a3      	cmp	r3, r4
 80029f6:	d9fa      	bls.n	80029ee <_free_r+0x46>
 80029f8:	6811      	ldr	r1, [r2, #0]
 80029fa:	1855      	adds	r5, r2, r1
 80029fc:	42a5      	cmp	r5, r4
 80029fe:	d10b      	bne.n	8002a18 <_free_r+0x70>
 8002a00:	6824      	ldr	r4, [r4, #0]
 8002a02:	4421      	add	r1, r4
 8002a04:	1854      	adds	r4, r2, r1
 8002a06:	42a3      	cmp	r3, r4
 8002a08:	6011      	str	r1, [r2, #0]
 8002a0a:	d1e0      	bne.n	80029ce <_free_r+0x26>
 8002a0c:	681c      	ldr	r4, [r3, #0]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	6053      	str	r3, [r2, #4]
 8002a12:	4421      	add	r1, r4
 8002a14:	6011      	str	r1, [r2, #0]
 8002a16:	e7da      	b.n	80029ce <_free_r+0x26>
 8002a18:	d902      	bls.n	8002a20 <_free_r+0x78>
 8002a1a:	230c      	movs	r3, #12
 8002a1c:	6003      	str	r3, [r0, #0]
 8002a1e:	e7d6      	b.n	80029ce <_free_r+0x26>
 8002a20:	6825      	ldr	r5, [r4, #0]
 8002a22:	1961      	adds	r1, r4, r5
 8002a24:	428b      	cmp	r3, r1
 8002a26:	bf04      	itt	eq
 8002a28:	6819      	ldreq	r1, [r3, #0]
 8002a2a:	685b      	ldreq	r3, [r3, #4]
 8002a2c:	6063      	str	r3, [r4, #4]
 8002a2e:	bf04      	itt	eq
 8002a30:	1949      	addeq	r1, r1, r5
 8002a32:	6021      	streq	r1, [r4, #0]
 8002a34:	6054      	str	r4, [r2, #4]
 8002a36:	e7ca      	b.n	80029ce <_free_r+0x26>
 8002a38:	b003      	add	sp, #12
 8002a3a:	bd30      	pop	{r4, r5, pc}
 8002a3c:	2001787c 	.word	0x2001787c

08002a40 <sbrk_aligned>:
 8002a40:	b570      	push	{r4, r5, r6, lr}
 8002a42:	4e0e      	ldr	r6, [pc, #56]	; (8002a7c <sbrk_aligned+0x3c>)
 8002a44:	460c      	mov	r4, r1
 8002a46:	6831      	ldr	r1, [r6, #0]
 8002a48:	4605      	mov	r5, r0
 8002a4a:	b911      	cbnz	r1, 8002a52 <sbrk_aligned+0x12>
 8002a4c:	f000 f8bc 	bl	8002bc8 <_sbrk_r>
 8002a50:	6030      	str	r0, [r6, #0]
 8002a52:	4621      	mov	r1, r4
 8002a54:	4628      	mov	r0, r5
 8002a56:	f000 f8b7 	bl	8002bc8 <_sbrk_r>
 8002a5a:	1c43      	adds	r3, r0, #1
 8002a5c:	d00a      	beq.n	8002a74 <sbrk_aligned+0x34>
 8002a5e:	1cc4      	adds	r4, r0, #3
 8002a60:	f024 0403 	bic.w	r4, r4, #3
 8002a64:	42a0      	cmp	r0, r4
 8002a66:	d007      	beq.n	8002a78 <sbrk_aligned+0x38>
 8002a68:	1a21      	subs	r1, r4, r0
 8002a6a:	4628      	mov	r0, r5
 8002a6c:	f000 f8ac 	bl	8002bc8 <_sbrk_r>
 8002a70:	3001      	adds	r0, #1
 8002a72:	d101      	bne.n	8002a78 <sbrk_aligned+0x38>
 8002a74:	f04f 34ff 	mov.w	r4, #4294967295
 8002a78:	4620      	mov	r0, r4
 8002a7a:	bd70      	pop	{r4, r5, r6, pc}
 8002a7c:	20017880 	.word	0x20017880

08002a80 <_malloc_r>:
 8002a80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a84:	1ccd      	adds	r5, r1, #3
 8002a86:	f025 0503 	bic.w	r5, r5, #3
 8002a8a:	3508      	adds	r5, #8
 8002a8c:	2d0c      	cmp	r5, #12
 8002a8e:	bf38      	it	cc
 8002a90:	250c      	movcc	r5, #12
 8002a92:	2d00      	cmp	r5, #0
 8002a94:	4607      	mov	r7, r0
 8002a96:	db01      	blt.n	8002a9c <_malloc_r+0x1c>
 8002a98:	42a9      	cmp	r1, r5
 8002a9a:	d905      	bls.n	8002aa8 <_malloc_r+0x28>
 8002a9c:	230c      	movs	r3, #12
 8002a9e:	603b      	str	r3, [r7, #0]
 8002aa0:	2600      	movs	r6, #0
 8002aa2:	4630      	mov	r0, r6
 8002aa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002aa8:	4e2e      	ldr	r6, [pc, #184]	; (8002b64 <_malloc_r+0xe4>)
 8002aaa:	f000 f89d 	bl	8002be8 <__malloc_lock>
 8002aae:	6833      	ldr	r3, [r6, #0]
 8002ab0:	461c      	mov	r4, r3
 8002ab2:	bb34      	cbnz	r4, 8002b02 <_malloc_r+0x82>
 8002ab4:	4629      	mov	r1, r5
 8002ab6:	4638      	mov	r0, r7
 8002ab8:	f7ff ffc2 	bl	8002a40 <sbrk_aligned>
 8002abc:	1c43      	adds	r3, r0, #1
 8002abe:	4604      	mov	r4, r0
 8002ac0:	d14d      	bne.n	8002b5e <_malloc_r+0xde>
 8002ac2:	6834      	ldr	r4, [r6, #0]
 8002ac4:	4626      	mov	r6, r4
 8002ac6:	2e00      	cmp	r6, #0
 8002ac8:	d140      	bne.n	8002b4c <_malloc_r+0xcc>
 8002aca:	6823      	ldr	r3, [r4, #0]
 8002acc:	4631      	mov	r1, r6
 8002ace:	4638      	mov	r0, r7
 8002ad0:	eb04 0803 	add.w	r8, r4, r3
 8002ad4:	f000 f878 	bl	8002bc8 <_sbrk_r>
 8002ad8:	4580      	cmp	r8, r0
 8002ada:	d13a      	bne.n	8002b52 <_malloc_r+0xd2>
 8002adc:	6821      	ldr	r1, [r4, #0]
 8002ade:	3503      	adds	r5, #3
 8002ae0:	1a6d      	subs	r5, r5, r1
 8002ae2:	f025 0503 	bic.w	r5, r5, #3
 8002ae6:	3508      	adds	r5, #8
 8002ae8:	2d0c      	cmp	r5, #12
 8002aea:	bf38      	it	cc
 8002aec:	250c      	movcc	r5, #12
 8002aee:	4629      	mov	r1, r5
 8002af0:	4638      	mov	r0, r7
 8002af2:	f7ff ffa5 	bl	8002a40 <sbrk_aligned>
 8002af6:	3001      	adds	r0, #1
 8002af8:	d02b      	beq.n	8002b52 <_malloc_r+0xd2>
 8002afa:	6823      	ldr	r3, [r4, #0]
 8002afc:	442b      	add	r3, r5
 8002afe:	6023      	str	r3, [r4, #0]
 8002b00:	e00e      	b.n	8002b20 <_malloc_r+0xa0>
 8002b02:	6822      	ldr	r2, [r4, #0]
 8002b04:	1b52      	subs	r2, r2, r5
 8002b06:	d41e      	bmi.n	8002b46 <_malloc_r+0xc6>
 8002b08:	2a0b      	cmp	r2, #11
 8002b0a:	d916      	bls.n	8002b3a <_malloc_r+0xba>
 8002b0c:	1961      	adds	r1, r4, r5
 8002b0e:	42a3      	cmp	r3, r4
 8002b10:	6025      	str	r5, [r4, #0]
 8002b12:	bf18      	it	ne
 8002b14:	6059      	strne	r1, [r3, #4]
 8002b16:	6863      	ldr	r3, [r4, #4]
 8002b18:	bf08      	it	eq
 8002b1a:	6031      	streq	r1, [r6, #0]
 8002b1c:	5162      	str	r2, [r4, r5]
 8002b1e:	604b      	str	r3, [r1, #4]
 8002b20:	4638      	mov	r0, r7
 8002b22:	f104 060b 	add.w	r6, r4, #11
 8002b26:	f000 f865 	bl	8002bf4 <__malloc_unlock>
 8002b2a:	f026 0607 	bic.w	r6, r6, #7
 8002b2e:	1d23      	adds	r3, r4, #4
 8002b30:	1af2      	subs	r2, r6, r3
 8002b32:	d0b6      	beq.n	8002aa2 <_malloc_r+0x22>
 8002b34:	1b9b      	subs	r3, r3, r6
 8002b36:	50a3      	str	r3, [r4, r2]
 8002b38:	e7b3      	b.n	8002aa2 <_malloc_r+0x22>
 8002b3a:	6862      	ldr	r2, [r4, #4]
 8002b3c:	42a3      	cmp	r3, r4
 8002b3e:	bf0c      	ite	eq
 8002b40:	6032      	streq	r2, [r6, #0]
 8002b42:	605a      	strne	r2, [r3, #4]
 8002b44:	e7ec      	b.n	8002b20 <_malloc_r+0xa0>
 8002b46:	4623      	mov	r3, r4
 8002b48:	6864      	ldr	r4, [r4, #4]
 8002b4a:	e7b2      	b.n	8002ab2 <_malloc_r+0x32>
 8002b4c:	4634      	mov	r4, r6
 8002b4e:	6876      	ldr	r6, [r6, #4]
 8002b50:	e7b9      	b.n	8002ac6 <_malloc_r+0x46>
 8002b52:	230c      	movs	r3, #12
 8002b54:	603b      	str	r3, [r7, #0]
 8002b56:	4638      	mov	r0, r7
 8002b58:	f000 f84c 	bl	8002bf4 <__malloc_unlock>
 8002b5c:	e7a1      	b.n	8002aa2 <_malloc_r+0x22>
 8002b5e:	6025      	str	r5, [r4, #0]
 8002b60:	e7de      	b.n	8002b20 <_malloc_r+0xa0>
 8002b62:	bf00      	nop
 8002b64:	2001787c 	.word	0x2001787c

08002b68 <_realloc_r>:
 8002b68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b6c:	4680      	mov	r8, r0
 8002b6e:	4614      	mov	r4, r2
 8002b70:	460e      	mov	r6, r1
 8002b72:	b921      	cbnz	r1, 8002b7e <_realloc_r+0x16>
 8002b74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002b78:	4611      	mov	r1, r2
 8002b7a:	f7ff bf81 	b.w	8002a80 <_malloc_r>
 8002b7e:	b92a      	cbnz	r2, 8002b8c <_realloc_r+0x24>
 8002b80:	f7ff ff12 	bl	80029a8 <_free_r>
 8002b84:	4625      	mov	r5, r4
 8002b86:	4628      	mov	r0, r5
 8002b88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002b8c:	f000 f838 	bl	8002c00 <_malloc_usable_size_r>
 8002b90:	4284      	cmp	r4, r0
 8002b92:	4607      	mov	r7, r0
 8002b94:	d802      	bhi.n	8002b9c <_realloc_r+0x34>
 8002b96:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002b9a:	d812      	bhi.n	8002bc2 <_realloc_r+0x5a>
 8002b9c:	4621      	mov	r1, r4
 8002b9e:	4640      	mov	r0, r8
 8002ba0:	f7ff ff6e 	bl	8002a80 <_malloc_r>
 8002ba4:	4605      	mov	r5, r0
 8002ba6:	2800      	cmp	r0, #0
 8002ba8:	d0ed      	beq.n	8002b86 <_realloc_r+0x1e>
 8002baa:	42bc      	cmp	r4, r7
 8002bac:	4622      	mov	r2, r4
 8002bae:	4631      	mov	r1, r6
 8002bb0:	bf28      	it	cs
 8002bb2:	463a      	movcs	r2, r7
 8002bb4:	f7ff fed0 	bl	8002958 <memcpy>
 8002bb8:	4631      	mov	r1, r6
 8002bba:	4640      	mov	r0, r8
 8002bbc:	f7ff fef4 	bl	80029a8 <_free_r>
 8002bc0:	e7e1      	b.n	8002b86 <_realloc_r+0x1e>
 8002bc2:	4635      	mov	r5, r6
 8002bc4:	e7df      	b.n	8002b86 <_realloc_r+0x1e>
	...

08002bc8 <_sbrk_r>:
 8002bc8:	b538      	push	{r3, r4, r5, lr}
 8002bca:	4d06      	ldr	r5, [pc, #24]	; (8002be4 <_sbrk_r+0x1c>)
 8002bcc:	2300      	movs	r3, #0
 8002bce:	4604      	mov	r4, r0
 8002bd0:	4608      	mov	r0, r1
 8002bd2:	602b      	str	r3, [r5, #0]
 8002bd4:	f7fe fe1c 	bl	8001810 <_sbrk>
 8002bd8:	1c43      	adds	r3, r0, #1
 8002bda:	d102      	bne.n	8002be2 <_sbrk_r+0x1a>
 8002bdc:	682b      	ldr	r3, [r5, #0]
 8002bde:	b103      	cbz	r3, 8002be2 <_sbrk_r+0x1a>
 8002be0:	6023      	str	r3, [r4, #0]
 8002be2:	bd38      	pop	{r3, r4, r5, pc}
 8002be4:	20017884 	.word	0x20017884

08002be8 <__malloc_lock>:
 8002be8:	4801      	ldr	r0, [pc, #4]	; (8002bf0 <__malloc_lock+0x8>)
 8002bea:	f000 b811 	b.w	8002c10 <__retarget_lock_acquire_recursive>
 8002bee:	bf00      	nop
 8002bf0:	20017888 	.word	0x20017888

08002bf4 <__malloc_unlock>:
 8002bf4:	4801      	ldr	r0, [pc, #4]	; (8002bfc <__malloc_unlock+0x8>)
 8002bf6:	f000 b80c 	b.w	8002c12 <__retarget_lock_release_recursive>
 8002bfa:	bf00      	nop
 8002bfc:	20017888 	.word	0x20017888

08002c00 <_malloc_usable_size_r>:
 8002c00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002c04:	1f18      	subs	r0, r3, #4
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	bfbc      	itt	lt
 8002c0a:	580b      	ldrlt	r3, [r1, r0]
 8002c0c:	18c0      	addlt	r0, r0, r3
 8002c0e:	4770      	bx	lr

08002c10 <__retarget_lock_acquire_recursive>:
 8002c10:	4770      	bx	lr

08002c12 <__retarget_lock_release_recursive>:
 8002c12:	4770      	bx	lr

08002c14 <_init>:
 8002c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c16:	bf00      	nop
 8002c18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c1a:	bc08      	pop	{r3}
 8002c1c:	469e      	mov	lr, r3
 8002c1e:	4770      	bx	lr

08002c20 <_fini>:
 8002c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c22:	bf00      	nop
 8002c24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c26:	bc08      	pop	{r3}
 8002c28:	469e      	mov	lr, r3
 8002c2a:	4770      	bx	lr
